/**
 * @fileoverview added by tsickle
 * Generated from: functions.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, NgZone, Optional } from '@angular/core';
import { from, of } from 'rxjs';
import { map, observeOn, shareReplay, switchMap } from 'rxjs/operators';
import { FIREBASE_APP_NAME, FIREBASE_OPTIONS, ɵAngularFireSchedulers, ɵfirebaseAppFactory, ɵlazySDKProxy, ɵapplyMixins } from '@angular/fire';
import { proxyPolyfillCompat } from './base';
import { ɵfetchInstance } from '@angular/fire';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
/** @type {?} */
export const ORIGIN = new InjectionToken('angularfire2.functions.origin');
/** @type {?} */
export const REGION = new InjectionToken('angularfire2.functions.region');
/** @type {?} */
export const NEW_ORIGIN_BEHAVIOR = new InjectionToken('angularfire2.functions.new-origin-behavior');
/** @type {?} */
export const USE_EMULATOR = new InjectionToken('angularfire2.functions.use-emulator');
// WARNING: interface has both a type and a value, skipping emit
export class AngularFireFunctions {
    /**
     * @param {?} options
     * @param {?} nameOrConfig
     * @param {?} zone
     * @param {?} region
     * @param {?} origin
     * @param {?} newOriginBehavior
     * @param {?} _useEmulator
     */
    constructor(options, nameOrConfig, zone, region, origin, newOriginBehavior, _useEmulator) {
        /** @type {?} */
        const schedulers = new ɵAngularFireSchedulers(zone);
        /** @type {?} */
        const useEmulator = _useEmulator;
        /** @type {?} */
        const functions = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap((/**
         * @return {?}
         */
        () => import('firebase/functions'))), map((/**
         * @return {?}
         */
        () => ɵfirebaseAppFactory(options, zone, nameOrConfig))), map((/**
         * @param {?} app
         * @return {?}
         */
        app => ɵfetchInstance(`${app.name}.functions.${region || origin}`, 'AngularFireFunctions', app, (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let functions;
            if (newOriginBehavior) {
                if (region && origin) {
                    throw new Error('REGION and ORIGIN can\'t be used at the same time.');
                }
                functions = app.functions(region || origin || undefined);
            }
            else {
                functions = app.functions(region || undefined);
            }
            if (!newOriginBehavior && !useEmulator && origin) {
                functions.useFunctionsEmulator(origin);
            }
            if (useEmulator) {
                functions.useEmulator(...useEmulator);
            }
            return functions;
        }), [region, origin, useEmulator]))), shareReplay({ bufferSize: 1, refCount: false }));
        this.httpsCallable = (/**
         * @template T, R
         * @param {?} name
         * @param {?=} options
         * @return {?}
         */
        (name, options) => (/**
         * @param {?} data
         * @return {?}
         */
        (data) => from(functions).pipe(observeOn(schedulers.insideAngular), switchMap((/**
         * @param {?} functions
         * @return {?}
         */
        functions => functions.httpsCallable(name, options)(data))), map((/**
         * @param {?} r
         * @return {?}
         */
        r => (/** @type {?} */ (r.data)))))));
        return ɵlazySDKProxy(this, functions, zone);
    }
}
AngularFireFunctions.decorators = [
    { type: Injectable, args: [{
                providedIn: 'any'
            },] }
];
/** @nocollapse */
AngularFireFunctions.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [FIREBASE_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FIREBASE_APP_NAME,] }] },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [REGION,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ORIGIN,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NEW_ORIGIN_BEHAVIOR,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [USE_EMULATOR,] }] }
];
/** @nocollapse */ AngularFireFunctions.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularFireFunctions_Factory() { return new AngularFireFunctions(i0.ɵɵinject(i1.FIREBASE_OPTIONS), i0.ɵɵinject(i1.FIREBASE_APP_NAME, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(REGION, 8), i0.ɵɵinject(ORIGIN, 8), i0.ɵɵinject(NEW_ORIGIN_BEHAVIOR, 8), i0.ɵɵinject(USE_EMULATOR, 8)); }, token: AngularFireFunctions, providedIn: "any" });
if (false) {
    /** @type {?} */
    AngularFireFunctions.prototype.httpsCallable;
}
ɵapplyMixins(AngularFireFunctions, [proxyPolyfillCompat]);
//# sourceMappingURL=data:application/json;base64,