/**
 * @fileoverview added by tsickle
 * Generated from: user-tracking.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformServer } from '@angular/common';
import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';
import { AngularFireAnalytics } from './analytics';
import { AngularFireAuth } from '@angular/fire/auth';
export class UserTrackingService {
    // TODO a user properties injector
    /**
     * @param {?} analytics
     * @param {?} platformId
     * @param {?} auth
     * @param {?} zone
     */
    constructor(analytics, 
    // tslint:disable-next-line:ban-types
    platformId, auth, zone) {
        this.disposables = [];
        if (!isPlatformServer(platformId)) {
            /** @type {?} */
            let resolveInitialized;
            this.initialized = zone.runOutsideAngular((/**
             * @return {?}
             */
            () => new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            resolve => resolveInitialized = resolve))));
            this.disposables = [
                auth.authState.subscribe((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => {
                    analytics.setUserId(user === null || user === void 0 ? void 0 : user.uid);
                    resolveInitialized();
                })),
                auth.credential.subscribe((/**
                 * @param {?} credential
                 * @return {?}
                 */
                credential => {
                    if (credential) {
                        /** @type {?} */
                        const method = credential.user.isAnonymous ? 'anonymous' : credential.additionalUserInfo.providerId;
                        if (credential.additionalUserInfo.isNewUser) {
                            analytics.logEvent('sign_up', { method });
                        }
                        analytics.logEvent('login', { method });
                    }
                }))
            ];
        }
        else {
            this.initialized = Promise.resolve();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposables.forEach((/**
         * @param {?} it
         * @return {?}
         */
        it => it.unsubscribe()));
    }
}
UserTrackingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UserTrackingService.ctorParameters = () => [
    { type: AngularFireAnalytics },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AngularFireAuth },
    { type: NgZone }
];
if (false) {
    /** @type {?} */
    UserTrackingService.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    UserTrackingService.prototype.disposables;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci10cmFja2luZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3J1bm5lci93b3JrL2FuZ3VsYXJmaXJlL2FuZ3VsYXJmaXJlL3NyYy9hbmFseXRpY3MvIiwic291cmNlcyI6WyJ1c2VyLXRyYWNraW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQWEsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJckQsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7Ozs7SUFNOUIsWUFDRSxTQUErQjtJQUMvQixxQ0FBcUM7SUFDaEIsVUFBa0IsRUFDdkMsSUFBcUIsRUFDckIsSUFBWTtRQVJOLGdCQUFXLEdBQXdCLEVBQUUsQ0FBQztRQVc1QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQUU7O2dCQUM3QixrQkFBa0I7WUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCOzs7WUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU87Ozs7WUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sRUFBQyxFQUFDLENBQUM7WUFDdEcsSUFBSSxDQUFDLFdBQVcsR0FBRztnQkFDZixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVM7Ozs7Z0JBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQzlCLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUMvQixrQkFBa0IsRUFBRSxDQUFDO2dCQUN2QixDQUFDLEVBQUM7Z0JBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTOzs7O2dCQUFDLFVBQVUsQ0FBQyxFQUFFO29CQUNyQyxJQUFJLFVBQVUsRUFBRTs7OEJBQ1IsTUFBTSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVO3dCQUNuRyxJQUFJLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUU7NEJBQzNDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQzt5QkFDM0M7d0JBQ0QsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO3FCQUN6QztnQkFDSCxDQUFDLEVBQUM7YUFDTCxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3RDO0lBRUgsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87Ozs7UUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDO0lBQ25ELENBQUM7OztZQXpDRixVQUFVOzs7O1lBSkYsb0JBQW9CO1lBY1EsTUFBTSx1QkFBdEMsTUFBTSxTQUFDLFdBQVc7WUFiZCxlQUFlO1lBRkssTUFBTTs7OztJQVFqQywwQ0FBMkI7Ozs7O0lBQzNCLDBDQUE4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmUsIE9uRGVzdHJveSwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlQW5hbHl0aWNzIH0gZnJvbSAnLi9hbmFseXRpY3MnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVBdXRoIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZS9hdXRoJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVXNlclRyYWNraW5nU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgaW5pdGlhbGl6ZWQ6IFByb21pc2U8dm9pZD47XG4gIHByaXZhdGUgZGlzcG9zYWJsZXM6IEFycmF5PFN1YnNjcmlwdGlvbj4gPSBbXTtcblxuICAvLyBUT0RPIGEgdXNlciBwcm9wZXJ0aWVzIGluamVjdG9yXG4gIGNvbnN0cnVjdG9yKFxuICAgIGFuYWx5dGljczogQW5ndWxhckZpcmVBbmFseXRpY3MsXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmJhbi10eXBlc1xuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IE9iamVjdCxcbiAgICBhdXRoOiBBbmd1bGFyRmlyZUF1dGgsXG4gICAgem9uZTogTmdab25lLFxuICApIHtcblxuICAgIGlmICghaXNQbGF0Zm9ybVNlcnZlcihwbGF0Zm9ybUlkKSkge1xuICAgICAgbGV0IHJlc29sdmVJbml0aWFsaXplZDtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVzb2x2ZUluaXRpYWxpemVkID0gcmVzb2x2ZSkpO1xuICAgICAgdGhpcy5kaXNwb3NhYmxlcyA9IFtcbiAgICAgICAgICBhdXRoLmF1dGhTdGF0ZS5zdWJzY3JpYmUodXNlciA9PiB7XG4gICAgICAgICAgICBhbmFseXRpY3Muc2V0VXNlcklkKHVzZXI/LnVpZCk7XG4gICAgICAgICAgICByZXNvbHZlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBhdXRoLmNyZWRlbnRpYWwuc3Vic2NyaWJlKGNyZWRlbnRpYWwgPT4ge1xuICAgICAgICAgICAgaWYgKGNyZWRlbnRpYWwpIHtcbiAgICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gY3JlZGVudGlhbC51c2VyLmlzQW5vbnltb3VzID8gJ2Fub255bW91cycgOiBjcmVkZW50aWFsLmFkZGl0aW9uYWxVc2VySW5mby5wcm92aWRlcklkO1xuICAgICAgICAgICAgICBpZiAoY3JlZGVudGlhbC5hZGRpdGlvbmFsVXNlckluZm8uaXNOZXdVc2VyKSB7XG4gICAgICAgICAgICAgICAgYW5hbHl0aWNzLmxvZ0V2ZW50KCdzaWduX3VwJywgeyBtZXRob2QgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYW5hbHl0aWNzLmxvZ0V2ZW50KCdsb2dpbicsIHsgbWV0aG9kIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmZvckVhY2goaXQgPT4gaXQudW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cbiJdfQ==