/**
 * @fileoverview added by tsickle
 * Generated from: utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
export function isString(value) {
    return typeof value === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFirebaseDataSnapshot(value) {
    return typeof value.exportVal === 'function';
}
/**
 * @param {?} obj
 * @return {?}
 */
export function isNil(obj) {
    return obj === undefined || obj === null;
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFirebaseRef(value) {
    return typeof value.set === 'function';
}
/**
 * Returns a database reference given a Firebase App and an
 * absolute or relative path.
 * @param {?} database - Firebase Database
 * @param {?} pathRef - Database path, relative or absolute
 * @return {?}
 */
export function getRef(database, pathRef) {
    // if a db ref was passed in, just return it
    return isFirebaseRef(pathRef) ? (/** @type {?} */ (pathRef))
        : database.ref((/** @type {?} */ (pathRef)));
}
/**
 * @param {?} item
 * @param {?} cases
 * @return {?}
 */
export function checkOperationCases(item, cases) {
    if (isString(item)) {
        return cases.stringCase();
    }
    else if (isFirebaseRef(item)) {
        return cases.firebaseCase();
    }
    else if (isFirebaseDataSnapshot(item)) {
        return cases.snapshotCase();
    }
    throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvcnVubmVyL3dvcmsvYW5ndWxhcmZpcmUvYW5ndWxhcmZpcmUvc3JjL2RhdGFiYXNlLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0EsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFVO0lBQ2pDLE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO0FBQ25DLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLEtBQVU7SUFDL0MsT0FBTyxPQUFPLEtBQUssQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDO0FBQy9DLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxHQUFRO0lBQzVCLE9BQU8sR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDO0FBQzNDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxLQUFVO0lBQ3RDLE9BQU8sT0FBTyxLQUFLLENBQUMsR0FBRyxLQUFLLFVBQVUsQ0FBQztBQUN6QyxDQUFDOzs7Ozs7OztBQVFELE1BQU0sVUFBVSxNQUFNLENBQUMsUUFBb0MsRUFBRSxPQUFzQjtJQUNqRiw0Q0FBNEM7SUFDNUMsT0FBTyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFBLE9BQU8sRUFBcUI7UUFDMUQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsbUJBQUEsT0FBTyxFQUFVLENBQUMsQ0FBQztBQUN0QyxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsSUFBdUIsRUFBRSxLQUE2QjtJQUN4RixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNsQixPQUFPLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUMzQjtTQUFNLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzlCLE9BQU8sS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0tBQzdCO1NBQU0sSUFBSSxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN2QyxPQUFPLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQUM3QjtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNuRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YWJhc2VSZWZlcmVuY2UsIEZpcmViYXNlT3BlcmF0aW9uLCBGaXJlYmFzZU9wZXJhdGlvbkNhc2VzLCBQYXRoUmVmZXJlbmNlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlyZWJhc2VEYXRhU25hcHNob3QodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlLmV4cG9ydFZhbCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTmlsKG9iajogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpcmViYXNlUmVmKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZS5zZXQgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGRhdGFiYXNlIHJlZmVyZW5jZSBnaXZlbiBhIEZpcmViYXNlIEFwcCBhbmQgYW5cbiAqIGFic29sdXRlIG9yIHJlbGF0aXZlIHBhdGguXG4gKiBAcGFyYW0gZGF0YWJhc2UgLSBGaXJlYmFzZSBEYXRhYmFzZVxuICogQHBhcmFtIHBhdGhSZWYgLSBEYXRhYmFzZSBwYXRoLCByZWxhdGl2ZSBvciBhYnNvbHV0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVmKGRhdGFiYXNlOiBmaXJlYmFzZS5kYXRhYmFzZS5EYXRhYmFzZSwgcGF0aFJlZjogUGF0aFJlZmVyZW5jZSk6IERhdGFiYXNlUmVmZXJlbmNlIHtcbiAgLy8gaWYgYSBkYiByZWYgd2FzIHBhc3NlZCBpbiwganVzdCByZXR1cm4gaXRcbiAgcmV0dXJuIGlzRmlyZWJhc2VSZWYocGF0aFJlZikgPyBwYXRoUmVmIGFzIERhdGFiYXNlUmVmZXJlbmNlXG4gICAgOiBkYXRhYmFzZS5yZWYocGF0aFJlZiBhcyBzdHJpbmcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tPcGVyYXRpb25DYXNlcyhpdGVtOiBGaXJlYmFzZU9wZXJhdGlvbiwgY2FzZXM6IEZpcmViYXNlT3BlcmF0aW9uQ2FzZXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKGlzU3RyaW5nKGl0ZW0pKSB7XG4gICAgcmV0dXJuIGNhc2VzLnN0cmluZ0Nhc2UoKTtcbiAgfSBlbHNlIGlmIChpc0ZpcmViYXNlUmVmKGl0ZW0pKSB7XG4gICAgcmV0dXJuIGNhc2VzLmZpcmViYXNlQ2FzZSgpO1xuICB9IGVsc2UgaWYgKGlzRmlyZWJhc2VEYXRhU25hcHNob3QoaXRlbSkpIHtcbiAgICByZXR1cm4gY2FzZXMuc25hcHNob3RDYXNlKCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RzIGEgc3RyaW5nLCBzbmFwc2hvdCwgb3IgcmVmZXJlbmNlLiBHb3Q6ICR7dHlwZW9mIGl0ZW19YCk7XG59XG4iXX0=