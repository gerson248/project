/**
 * @fileoverview added by tsickle
 * Generated from: list/create-reference.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { snapshotChanges } from './snapshot-changes';
import { stateChanges } from './state-changes';
import { auditTrail } from './audit-trail';
import { createDataOperationMethod } from './data-operation';
import { createRemoveMethod } from './remove';
import { map } from 'rxjs/operators';
/**
 * @template T
 * @param {?} query
 * @param {?} afDatabase
 * @return {?}
 */
export function createListReference(query, afDatabase) {
    /** @type {?} */
    const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;
    /** @type {?} */
    const refInZone = afDatabase.schedulers.ngZone.run((/**
     * @return {?}
     */
    () => query.ref));
    return {
        query,
        update: createDataOperationMethod(refInZone, 'update'),
        set: createDataOperationMethod(refInZone, 'set'),
        push: (/**
         * @param {?} data
         * @return {?}
         */
        (data) => refInZone.push(data)),
        remove: createRemoveMethod(refInZone),
        /**
         * @param {?=} events
         * @return {?}
         */
        snapshotChanges(events) {
            return snapshotChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);
        },
        /**
         * @param {?=} events
         * @return {?}
         */
        stateChanges(events) {
            return stateChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);
        },
        /**
         * @param {?=} events
         * @return {?}
         */
        auditTrail(events) {
            return auditTrail(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);
        },
        /**
         * @template K
         * @param {?=} events
         * @param {?=} options
         * @return {?}
         */
        valueChanges(events, options) {
            /** @type {?} */
            const snapshotChanges$ = snapshotChanges(query, events, outsideAngularScheduler);
            return snapshotChanges$.pipe(map((/**
             * @param {?} actions
             * @return {?}
             */
            actions => actions.map((/**
             * @param {?} a
             * @return {?}
             */
            a => {
                if (options && options.idField) {
                    return Object.assign(Object.assign({}, (/** @type {?} */ (a.payload.val()))), {
                        [options.idField]: a.key
                    });
                }
                else {
                    return (/** @type {?} */ (a.payload.val()));
                }
            })))), afDatabase.keepUnstableUntilFirst);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXJlZmVyZW5jZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW5uZXIvd29yay9hbmd1bGFyZmlyZS9hbmd1bGFyZmlyZS9zcmMvZGF0YWJhc2UvIiwic291cmNlcyI6WyJsaXN0L2NyZWF0ZS1yZWZlcmVuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTlDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7OztBQUVyQyxNQUFNLFVBQVUsbUJBQW1CLENBQVMsS0FBb0IsRUFBRSxVQUErQjs7VUFDekYsdUJBQXVCLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxjQUFjOztVQUM5RCxTQUFTLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRzs7O0lBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBQztJQUNuRSxPQUFPO1FBQ0wsS0FBSztRQUNMLE1BQU0sRUFBRSx5QkFBeUIsQ0FBYSxTQUFTLEVBQUUsUUFBUSxDQUFDO1FBQ2xFLEdBQUcsRUFBRSx5QkFBeUIsQ0FBSSxTQUFTLEVBQUUsS0FBSyxDQUFDO1FBQ25ELElBQUk7Ozs7UUFBRSxDQUFDLElBQU8sRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2QyxNQUFNLEVBQUUsa0JBQWtCLENBQUMsU0FBUyxDQUFDOzs7OztRQUNyQyxlQUFlLENBQUMsTUFBcUI7WUFDbkMsT0FBTyxlQUFlLENBQUksS0FBSyxFQUFFLE1BQU0sRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUM1RyxDQUFDOzs7OztRQUNELFlBQVksQ0FBQyxNQUFxQjtZQUNoQyxPQUFPLFlBQVksQ0FBSSxLQUFLLEVBQUUsTUFBTSxFQUFFLHVCQUF1QixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3pHLENBQUM7Ozs7O1FBQ0QsVUFBVSxDQUFDLE1BQXFCO1lBQzlCLE9BQU8sVUFBVSxDQUFJLEtBQUssRUFBRSxNQUFNLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDdkcsQ0FBQzs7Ozs7OztRQUNELFlBQVksQ0FBbUIsTUFBcUIsRUFBRSxPQUF1Qjs7a0JBQ3JFLGdCQUFnQixHQUFHLGVBQWUsQ0FBSSxLQUFLLEVBQUUsTUFBTSxFQUFFLHVCQUF1QixDQUFDO1lBQ25GLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUMxQixHQUFHOzs7O1lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRzs7OztZQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUM3QixJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO29CQUM5Qix1Q0FDSyxtQkFBQSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFLLEdBQ3BCO3dCQUNELENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHO3FCQUN6QixFQUNEO2lCQUNIO3FCQUFNO29CQUNMLE9BQU8sbUJBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBSyxDQUFDO2lCQUM3QjtZQUNILENBQUMsRUFBQyxFQUFDLEVBQ0gsVUFBVSxDQUFDLHNCQUFzQixDQUNsQyxDQUFDO1FBQ0osQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5ndWxhckZpcmVMaXN0LCBDaGlsZEV2ZW50LCBEYXRhYmFzZVF1ZXJ5IH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBzbmFwc2hvdENoYW5nZXMgfSBmcm9tICcuL3NuYXBzaG90LWNoYW5nZXMnO1xuaW1wb3J0IHsgc3RhdGVDaGFuZ2VzIH0gZnJvbSAnLi9zdGF0ZS1jaGFuZ2VzJztcbmltcG9ydCB7IGF1ZGl0VHJhaWwgfSBmcm9tICcuL2F1ZGl0LXRyYWlsJztcbmltcG9ydCB7IGNyZWF0ZURhdGFPcGVyYXRpb25NZXRob2QgfSBmcm9tICcuL2RhdGEtb3BlcmF0aW9uJztcbmltcG9ydCB7IGNyZWF0ZVJlbW92ZU1ldGhvZCB9IGZyb20gJy4vcmVtb3ZlJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlRGF0YWJhc2UgfSBmcm9tICcuLi9kYXRhYmFzZSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMaXN0UmVmZXJlbmNlPFQ9IGFueT4ocXVlcnk6IERhdGFiYXNlUXVlcnksIGFmRGF0YWJhc2U6IEFuZ3VsYXJGaXJlRGF0YWJhc2UpOiBBbmd1bGFyRmlyZUxpc3Q8VD4ge1xuICBjb25zdCBvdXRzaWRlQW5ndWxhclNjaGVkdWxlciA9IGFmRGF0YWJhc2Uuc2NoZWR1bGVycy5vdXRzaWRlQW5ndWxhcjtcbiAgY29uc3QgcmVmSW5ab25lID0gYWZEYXRhYmFzZS5zY2hlZHVsZXJzLm5nWm9uZS5ydW4oKCkgPT4gcXVlcnkucmVmKTtcbiAgcmV0dXJuIHtcbiAgICBxdWVyeSxcbiAgICB1cGRhdGU6IGNyZWF0ZURhdGFPcGVyYXRpb25NZXRob2Q8UGFydGlhbDxUPj4ocmVmSW5ab25lLCAndXBkYXRlJyksXG4gICAgc2V0OiBjcmVhdGVEYXRhT3BlcmF0aW9uTWV0aG9kPFQ+KHJlZkluWm9uZSwgJ3NldCcpLFxuICAgIHB1c2g6IChkYXRhOiBUKSA9PiByZWZJblpvbmUucHVzaChkYXRhKSxcbiAgICByZW1vdmU6IGNyZWF0ZVJlbW92ZU1ldGhvZChyZWZJblpvbmUpLFxuICAgIHNuYXBzaG90Q2hhbmdlcyhldmVudHM/OiBDaGlsZEV2ZW50W10pIHtcbiAgICAgIHJldHVybiBzbmFwc2hvdENoYW5nZXM8VD4ocXVlcnksIGV2ZW50cywgb3V0c2lkZUFuZ3VsYXJTY2hlZHVsZXIpLnBpcGUoYWZEYXRhYmFzZS5rZWVwVW5zdGFibGVVbnRpbEZpcnN0KTtcbiAgICB9LFxuICAgIHN0YXRlQ2hhbmdlcyhldmVudHM/OiBDaGlsZEV2ZW50W10pIHtcbiAgICAgIHJldHVybiBzdGF0ZUNoYW5nZXM8VD4ocXVlcnksIGV2ZW50cywgb3V0c2lkZUFuZ3VsYXJTY2hlZHVsZXIpLnBpcGUoYWZEYXRhYmFzZS5rZWVwVW5zdGFibGVVbnRpbEZpcnN0KTtcbiAgICB9LFxuICAgIGF1ZGl0VHJhaWwoZXZlbnRzPzogQ2hpbGRFdmVudFtdKSB7XG4gICAgICByZXR1cm4gYXVkaXRUcmFpbDxUPihxdWVyeSwgZXZlbnRzLCBvdXRzaWRlQW5ndWxhclNjaGVkdWxlcikucGlwZShhZkRhdGFiYXNlLmtlZXBVbnN0YWJsZVVudGlsRmlyc3QpO1xuICAgIH0sXG4gICAgdmFsdWVDaGFuZ2VzPEsgZXh0ZW5kcyBzdHJpbmc+KGV2ZW50cz86IENoaWxkRXZlbnRbXSwgb3B0aW9ucz86IHtpZEZpZWxkPzogS30pIHtcbiAgICAgIGNvbnN0IHNuYXBzaG90Q2hhbmdlcyQgPSBzbmFwc2hvdENoYW5nZXM8VD4ocXVlcnksIGV2ZW50cywgb3V0c2lkZUFuZ3VsYXJTY2hlZHVsZXIpO1xuICAgICAgcmV0dXJuIHNuYXBzaG90Q2hhbmdlcyQucGlwZShcbiAgICAgICAgbWFwKGFjdGlvbnMgPT4gYWN0aW9ucy5tYXAoYSA9PiB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5pZEZpZWxkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5hLnBheWxvYWQudmFsKCkgYXMgVCxcbiAgICAgICAgICAgICAgLi4ue1xuICAgICAgICAgICAgICAgIFtvcHRpb25zLmlkRmllbGRdOiBhLmtleVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wYXlsb2FkLnZhbCgpIGFzIFQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KSksXG4gICAgICAgIGFmRGF0YWJhc2Uua2VlcFVuc3RhYmxlVW50aWxGaXJzdFxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXX0=