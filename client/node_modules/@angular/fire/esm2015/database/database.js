/**
 * @fileoverview added by tsickle
 * Generated from: database.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';
import { getRef } from './utils';
import { createListReference } from './list/create-reference';
import { createObjectReference } from './object/create-reference';
import { FIREBASE_APP_NAME, FIREBASE_OPTIONS, ɵAngularFireSchedulers, ɵfirebaseAppFactory, ɵkeepUnstableUntilFirstFactory, } from '@angular/fire';
import 'firebase/database';
import { USE_EMULATOR as USE_AUTH_EMULATOR } from '@angular/fire/auth';
import firebase from 'firebase/app';
import { ɵfetchInstance, ɵlogAuthEmulatorError } from '@angular/fire';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
import * as i2 from "@angular/fire/auth";
/** @type {?} */
export const URL = new InjectionToken('angularfire2.realtimeDatabaseURL');
/** @type {?} */
export const USE_EMULATOR = new InjectionToken('angularfire2.database.use-emulator');
export class AngularFireDatabase {
    /**
     * @param {?} options
     * @param {?} nameOrConfig
     * @param {?} databaseURL
     * @param {?} platformId
     * @param {?} zone
     * @param {?} _useEmulator
     * @param {?} useAuthEmulator
     */
    constructor(options, nameOrConfig, databaseURL, 
    // tslint:disable-next-line:ban-types
    platformId, zone, _useEmulator, // tuple isn't working here
    useAuthEmulator) {
        this.schedulers = new ɵAngularFireSchedulers(zone);
        this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);
        /** @type {?} */
        const useEmulator = _useEmulator;
        /** @type {?} */
        const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);
        if (!firebase.auth && useAuthEmulator) {
            ɵlogAuthEmulatorError();
        }
        this.database = ɵfetchInstance(`${app.name}.database.${databaseURL}`, 'AngularFireDatabase', app, (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const database = zone.runOutsideAngular((/**
             * @return {?}
             */
            () => app.database(databaseURL || undefined)));
            if (useEmulator) {
                database.useEmulator(...useEmulator);
            }
            return database;
        }), [useEmulator]);
    }
    /**
     * @template T
     * @param {?} pathOrRef
     * @param {?=} queryFn
     * @return {?}
     */
    list(pathOrRef, queryFn) {
        /** @type {?} */
        const ref = this.schedulers.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => getRef(this.database, pathOrRef)));
        /** @type {?} */
        let query = ref;
        if (queryFn) {
            query = queryFn(ref);
        }
        return createListReference(query, this);
    }
    /**
     * @template T
     * @param {?} pathOrRef
     * @return {?}
     */
    object(pathOrRef) {
        /** @type {?} */
        const ref = this.schedulers.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => getRef(this.database, pathOrRef)));
        return createObjectReference(ref, this);
    }
    /**
     * @return {?}
     */
    createPushId() {
        /** @type {?} */
        const ref = this.schedulers.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => this.database.ref()));
        return ref.push().key;
    }
}
AngularFireDatabase.decorators = [
    { type: Injectable, args: [{
                providedIn: 'any'
            },] }
];
/** @nocollapse */
AngularFireDatabase.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [FIREBASE_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FIREBASE_APP_NAME,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [URL,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [USE_EMULATOR,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [USE_AUTH_EMULATOR,] }] }
];
/** @nocollapse */ AngularFireDatabase.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularFireDatabase_Factory() { return new AngularFireDatabase(i0.ɵɵinject(i1.FIREBASE_OPTIONS), i0.ɵɵinject(i1.FIREBASE_APP_NAME, 8), i0.ɵɵinject(URL, 8), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.USE_EMULATOR, 8)); }, token: AngularFireDatabase, providedIn: "any" });
if (false) {
    /** @type {?} */
    AngularFireDatabase.prototype.database;
    /** @type {?} */
    AngularFireDatabase.prototype.schedulers;
    /** @type {?} */
    AngularFireDatabase.prototype.keepUnstableUntilFirst;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvcnVubmVyL3dvcmsvYW5ndWxhcmZpcmUvYW5ndWxhcmZpcmUvc3JjL2RhdGFiYXNlLyIsInNvdXJjZXMiOlsiZGF0YWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbEcsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNqQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLGdCQUFnQixFQUdoQixzQkFBc0IsRUFDdEIsbUJBQW1CLEVBQ25CLDhCQUE4QixHQUMvQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLG1CQUFtQixDQUFDO0FBQzNCLE9BQU8sRUFBRSxZQUFZLElBQUksaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RSxPQUFPLFFBQVEsTUFBTSxjQUFjLENBQUM7QUFDcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFFdEUsTUFBTSxPQUFPLEdBQUcsR0FBRyxJQUFJLGNBQWMsQ0FBUyxrQ0FBa0MsQ0FBQzs7QUFNakYsTUFBTSxPQUFPLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBdUIsb0NBQW9DLENBQUM7QUFLMUcsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7Ozs7OztJQU05QixZQUM0QixPQUF3QixFQUNYLFlBQTJELEVBQ3pFLFdBQTBCO0lBQ25ELHFDQUFxQztJQUNoQixVQUFrQixFQUN2QyxJQUFZLEVBQ3NCLFlBQWlCLEVBQUUsMkJBQTJCO0lBQ3pDLGVBQW9CO1FBRTNELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsc0JBQXNCLEdBQUcsOEJBQThCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztjQUV4RSxXQUFXLEdBQWdDLFlBQVk7O2NBQ3ZELEdBQUcsR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQztRQUU1RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxlQUFlLEVBQUU7WUFDckMscUJBQXFCLEVBQUUsQ0FBQztTQUN6QjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksYUFBYSxXQUFXLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxHQUFHOzs7UUFBRSxHQUFHLEVBQUU7O2tCQUMvRixRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQjs7O1lBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLElBQUksU0FBUyxDQUFDLEVBQUM7WUFDckYsSUFBSSxXQUFXLEVBQUU7Z0JBQ2YsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDO2FBQ3RDO1lBQ0QsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQyxHQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNwQixDQUFDOzs7Ozs7O0lBRUQsSUFBSSxDQUFJLFNBQXdCLEVBQUUsT0FBaUI7O2NBQzNDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7OztRQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxFQUFDOztZQUN4RixLQUFLLEdBQWtCLEdBQUc7UUFDOUIsSUFBSSxPQUFPLEVBQUU7WUFDWCxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxtQkFBbUIsQ0FBSSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7Ozs7O0lBRUQsTUFBTSxDQUFJLFNBQXdCOztjQUMxQixHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsRUFBQztRQUM1RixPQUFPLHFCQUFxQixDQUFJLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7O0lBRUQsWUFBWTs7Y0FDSixHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFDO1FBQy9FLE9BQU8sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUN4QixDQUFDOzs7WUF2REYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxLQUFLO2FBQ2xCOzs7OzRDQVFJLE1BQU0sU0FBQyxnQkFBZ0I7NENBQ3ZCLFFBQVEsWUFBSSxNQUFNLFNBQUMsaUJBQWlCOzRDQUNwQyxRQUFRLFlBQUksTUFBTSxTQUFDLEdBQUc7WUFFVSxNQUFNLHVCQUF0QyxNQUFNLFNBQUMsV0FBVztZQTFDc0IsTUFBTTs0Q0E0QzlDLFFBQVEsWUFBSSxNQUFNLFNBQUMsWUFBWTs0Q0FDL0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxpQkFBaUI7Ozs7O0lBYnZDLHVDQUFxRDs7SUFFckQseUNBQW1EOztJQUNuRCxxREFBa0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBOZ1pvbmUsIE9wdGlvbmFsLCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVMaXN0LCBBbmd1bGFyRmlyZU9iamVjdCwgRGF0YWJhc2VRdWVyeSwgUGF0aFJlZmVyZW5jZSwgUXVlcnlGbiB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBnZXRSZWYgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUxpc3RSZWZlcmVuY2UgfSBmcm9tICcuL2xpc3QvY3JlYXRlLXJlZmVyZW5jZSc7XG5pbXBvcnQgeyBjcmVhdGVPYmplY3RSZWZlcmVuY2UgfSBmcm9tICcuL29iamVjdC9jcmVhdGUtcmVmZXJlbmNlJztcbmltcG9ydCB7XG4gIEZJUkVCQVNFX0FQUF9OQU1FLFxuICBGSVJFQkFTRV9PUFRJT05TLFxuICBGaXJlYmFzZUFwcENvbmZpZyxcbiAgRmlyZWJhc2VPcHRpb25zLFxuICDJtUFuZ3VsYXJGaXJlU2NoZWR1bGVycyxcbiAgybVmaXJlYmFzZUFwcEZhY3RvcnksXG4gIMm1a2VlcFVuc3RhYmxlVW50aWxGaXJzdEZhY3RvcnksXG59IGZyb20gJ0Bhbmd1bGFyL2ZpcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0ICdmaXJlYmFzZS9kYXRhYmFzZSc7XG5pbXBvcnQgeyBVU0VfRU1VTEFUT1IgYXMgVVNFX0FVVEhfRU1VTEFUT1IgfSBmcm9tICdAYW5ndWxhci9maXJlL2F1dGgnO1xuaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyDJtWZldGNoSW5zdGFuY2UsIMm1bG9nQXV0aEVtdWxhdG9yRXJyb3IgfSBmcm9tICdAYW5ndWxhci9maXJlJztcblxuZXhwb3J0IGNvbnN0IFVSTCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdhbmd1bGFyZmlyZTIucmVhbHRpbWVEYXRhYmFzZVVSTCcpO1xuXG4vLyBTRU1WRVIoNyk6IHVzZSBQYXJhbWV0ZXJzIHRvIGRldGlybWluZSB0aGUgdXNlRW11bGF0b3IgYXJndW1lbnRzXG4vLyBUT0RPKGphbWVzZGFuaWVscyk6IGRvbid0IGhhcmRjb2RlLCBidXQgaGF2aW5nIHR5ZXBzY3JpcHQgaXNzdWVzIHdpdGggZmlyZWJhc2UuZGF0YWJhc2UuRGF0YWJhc2Vcbi8vIHR5cGUgVXNlRW11bGF0b3JBcmd1bWVudHMgPSBQYXJhbWV0ZXJzPHR5cGVvZiBmaXJlYmFzZS5kYXRhYmFzZS5EYXRhYmFzZS5wcm90b3R5cGUudXNlRW11bGF0b3I+O1xudHlwZSBVc2VFbXVsYXRvckFyZ3VtZW50cyA9IFtzdHJpbmcsIG51bWJlcl07XG5leHBvcnQgY29uc3QgVVNFX0VNVUxBVE9SID0gbmV3IEluamVjdGlvblRva2VuPFVzZUVtdWxhdG9yQXJndW1lbnRzPignYW5ndWxhcmZpcmUyLmRhdGFiYXNlLnVzZS1lbXVsYXRvcicpO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdhbnknXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJGaXJlRGF0YWJhc2Uge1xuICBwdWJsaWMgcmVhZG9ubHkgZGF0YWJhc2U6IGZpcmViYXNlLmRhdGFiYXNlLkRhdGFiYXNlO1xuXG4gIHB1YmxpYyByZWFkb25seSBzY2hlZHVsZXJzOiDJtUFuZ3VsYXJGaXJlU2NoZWR1bGVycztcbiAgcHVibGljIHJlYWRvbmx5IGtlZXBVbnN0YWJsZVVudGlsRmlyc3Q6IDxUPihvYnMkOiBPYnNlcnZhYmxlPFQ+KSA9PiBPYnNlcnZhYmxlPFQ+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoRklSRUJBU0VfT1BUSU9OUykgb3B0aW9uczogRmlyZWJhc2VPcHRpb25zLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRklSRUJBU0VfQVBQX05BTUUpIG5hbWVPckNvbmZpZzogc3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCBudWxsIHwgdW5kZWZpbmVkLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoVVJMKSBkYXRhYmFzZVVSTDogc3RyaW5nIHwgbnVsbCxcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogT2JqZWN0LFxuICAgIHpvbmU6IE5nWm9uZSxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KFVTRV9FTVVMQVRPUikgX3VzZUVtdWxhdG9yOiBhbnksIC8vIHR1cGxlIGlzbid0IHdvcmtpbmcgaGVyZVxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoVVNFX0FVVEhfRU1VTEFUT1IpIHVzZUF1dGhFbXVsYXRvcjogYW55LFxuICApIHtcbiAgICB0aGlzLnNjaGVkdWxlcnMgPSBuZXcgybVBbmd1bGFyRmlyZVNjaGVkdWxlcnMoem9uZSk7XG4gICAgdGhpcy5rZWVwVW5zdGFibGVVbnRpbEZpcnN0ID0gybVrZWVwVW5zdGFibGVVbnRpbEZpcnN0RmFjdG9yeSh0aGlzLnNjaGVkdWxlcnMpO1xuXG4gICAgY29uc3QgdXNlRW11bGF0b3I6IFVzZUVtdWxhdG9yQXJndW1lbnRzIHwgbnVsbCA9IF91c2VFbXVsYXRvcjtcbiAgICBjb25zdCBhcHAgPSDJtWZpcmViYXNlQXBwRmFjdG9yeShvcHRpb25zLCB6b25lLCBuYW1lT3JDb25maWcpO1xuXG4gICAgaWYgKCFmaXJlYmFzZS5hdXRoICYmIHVzZUF1dGhFbXVsYXRvcikge1xuICAgICAgybVsb2dBdXRoRW11bGF0b3JFcnJvcigpO1xuICAgIH1cblxuICAgIHRoaXMuZGF0YWJhc2UgPSDJtWZldGNoSW5zdGFuY2UoYCR7YXBwLm5hbWV9LmRhdGFiYXNlLiR7ZGF0YWJhc2VVUkx9YCwgJ0FuZ3VsYXJGaXJlRGF0YWJhc2UnLCBhcHAsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGFiYXNlID0gem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBhcHAuZGF0YWJhc2UoZGF0YWJhc2VVUkwgfHwgdW5kZWZpbmVkKSk7XG4gICAgICBpZiAodXNlRW11bGF0b3IpIHtcbiAgICAgICAgZGF0YWJhc2UudXNlRW11bGF0b3IoLi4udXNlRW11bGF0b3IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGFiYXNlO1xuICAgIH0sIFt1c2VFbXVsYXRvcl0pO1xuICB9XG5cbiAgbGlzdDxUPihwYXRoT3JSZWY6IFBhdGhSZWZlcmVuY2UsIHF1ZXJ5Rm4/OiBRdWVyeUZuKTogQW5ndWxhckZpcmVMaXN0PFQ+IHtcbiAgICBjb25zdCByZWYgPSB0aGlzLnNjaGVkdWxlcnMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGdldFJlZih0aGlzLmRhdGFiYXNlLCBwYXRoT3JSZWYpKTtcbiAgICBsZXQgcXVlcnk6IERhdGFiYXNlUXVlcnkgPSByZWY7XG4gICAgaWYgKHF1ZXJ5Rm4pIHtcbiAgICAgIHF1ZXJ5ID0gcXVlcnlGbihyZWYpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlTGlzdFJlZmVyZW5jZTxUPihxdWVyeSwgdGhpcyk7XG4gIH1cblxuICBvYmplY3Q8VD4ocGF0aE9yUmVmOiBQYXRoUmVmZXJlbmNlKTogQW5ndWxhckZpcmVPYmplY3Q8VD4ge1xuICAgIGNvbnN0IHJlZiA9IHRoaXMuc2NoZWR1bGVycy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gZ2V0UmVmKHRoaXMuZGF0YWJhc2UsIHBhdGhPclJlZikpO1xuICAgIHJldHVybiBjcmVhdGVPYmplY3RSZWZlcmVuY2U8VD4ocmVmLCB0aGlzKTtcbiAgfVxuXG4gIGNyZWF0ZVB1c2hJZCgpIHtcbiAgICBjb25zdCByZWYgPSB0aGlzLnNjaGVkdWxlcnMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMuZGF0YWJhc2UucmVmKCkpO1xuICAgIHJldHVybiByZWYucHVzaCgpLmtleTtcbiAgfVxuXG59XG5cbmV4cG9ydCB7XG4gIFBhdGhSZWZlcmVuY2UsXG4gIERhdGFiYXNlU25hcHNob3QsXG4gIENoaWxkRXZlbnQsXG4gIExpc3RlbkV2ZW50LFxuICBRdWVyeUZuLFxuICBBbmd1bGFyRmlyZUxpc3QsXG4gIEFuZ3VsYXJGaXJlT2JqZWN0LFxuICBBbmd1bGFyRmlyZUFjdGlvbixcbiAgQWN0aW9uLFxuICBTbmFwc2hvdEFjdGlvblxufSBmcm9tICcuL2ludGVyZmFjZXMnO1xuIl19