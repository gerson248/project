/**
 * @fileoverview added by tsickle
 * Generated from: observable/fromRef.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { asyncScheduler, Observable } from 'rxjs';
import { map, share } from 'rxjs/operators';
/**
 * @record
 * @template T
 */
function SnapshotPrevKey() { }
if (false) {
    /** @type {?} */
    SnapshotPrevKey.prototype.snapshot;
    /** @type {?} */
    SnapshotPrevKey.prototype.prevKey;
}
/**
 * Create an observable from a Database Reference or Database Query.
 * @template T
 * @param {?} ref Database Reference
 * @param {?} event Listen event type ('value', 'added', 'changed', 'removed', 'moved')
 * @param {?=} listenType 'on' or 'once'
 * @param {?=} scheduler - Rxjs scheduler
 * @return {?}
 */
export function fromRef(ref, event, listenType = 'on', scheduler = asyncScheduler) {
    return new Observable((/**
     * @param {?} subscriber
     * @return {?}
     */
    subscriber => {
        /** @type {?} */
        let fn = null;
        fn = ref[listenType](event, (/**
         * @param {?} snapshot
         * @param {?} prevKey
         * @return {?}
         */
        (snapshot, prevKey) => {
            scheduler.schedule((/**
             * @return {?}
             */
            () => {
                subscriber.next({ snapshot, prevKey });
            }));
            if (listenType === 'once') {
                scheduler.schedule((/**
                 * @return {?}
                 */
                () => subscriber.complete()));
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            scheduler.schedule((/**
             * @return {?}
             */
            () => subscriber.error(err)));
        }));
        if (listenType === 'on') {
            return {
                /**
                 * @return {?}
                 */
                unsubscribe() {
                    if (fn != null) {
                        ref.off(event, fn);
                    }
                }
            };
        }
        else {
            return {
                /**
                 * @return {?}
                 */
                unsubscribe() {
                }
            };
        }
    })).pipe(map((/**
     * @param {?} payload
     * @return {?}
     */
    payload => {
        const { snapshot, prevKey } = payload;
        /** @type {?} */
        let key = null;
        if (snapshot.exists()) {
            key = snapshot.key;
        }
        return { type: event, payload: snapshot, prevKey, key };
    })), share());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVJlZi5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW5uZXIvd29yay9hbmd1bGFyZmlyZS9hbmd1bGFyZmlyZS9zcmMvZGF0YWJhc2UvIiwic291cmNlcyI6WyJvYnNlcnZhYmxlL2Zyb21SZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBaUIsTUFBTSxNQUFNLENBQUM7QUFDakUsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFFNUMsOEJBR0M7OztJQUZDLG1DQUE4Qjs7SUFDOUIsa0NBQW1DOzs7Ozs7Ozs7OztBQVVyQyxNQUFNLFVBQVUsT0FBTyxDQUFJLEdBQWtCLEVBQ2xCLEtBQWtCLEVBQ2xCLFVBQVUsR0FBRyxJQUFJLEVBQ2pCLFlBQTJCLGNBQWM7SUFFbEUsT0FBTyxJQUFJLFVBQVU7Ozs7SUFBcUIsVUFBVSxDQUFDLEVBQUU7O1lBQ2pELEVBQUUsR0FBZSxJQUFJO1FBQ3pCLEVBQUUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSzs7Ozs7UUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUNoRCxTQUFTLENBQUMsUUFBUTs7O1lBQUMsR0FBRyxFQUFFO2dCQUN0QixVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDekMsQ0FBQyxFQUFDLENBQUM7WUFDSCxJQUFJLFVBQVUsS0FBSyxNQUFNLEVBQUU7Z0JBQ3pCLFNBQVMsQ0FBQyxRQUFROzs7Z0JBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUM7YUFDakQ7UUFDSCxDQUFDOzs7O1FBQUUsR0FBRyxDQUFDLEVBQUU7WUFDUCxTQUFTLENBQUMsUUFBUTs7O1lBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDO1FBQ2xELENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFO1lBQ3ZCLE9BQU87Ozs7Z0JBQ0wsV0FBVztvQkFDVCxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7d0JBQ2QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7cUJBQ3BCO2dCQUNILENBQUM7YUFDRixDQUFDO1NBQ0g7YUFBTTtZQUNMLE9BQU87Ozs7Z0JBQ0wsV0FBVztnQkFDWCxDQUFDO2FBQ0YsQ0FBQztTQUNIO0lBQ0gsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUNMLEdBQUc7Ozs7SUFBQyxPQUFPLENBQUMsRUFBRTtjQUNOLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU87O1lBQ2pDLEdBQUcsR0FBa0IsSUFBSTtRQUM3QixJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNyQixHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztTQUNwQjtRQUNELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQzFELENBQUMsRUFBQyxFQUNGLEtBQUssRUFBRSxDQUNSLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5ndWxhckZpcmVBY3Rpb24sIERhdGFiYXNlUXVlcnksIERhdGFiYXNlU25hcHNob3QsIExpc3RlbkV2ZW50IH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBhc3luY1NjaGVkdWxlciwgT2JzZXJ2YWJsZSwgU2NoZWR1bGVyTGlrZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzaGFyZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW50ZXJmYWNlIFNuYXBzaG90UHJldktleTxUPiB7XG4gIHNuYXBzaG90OiBEYXRhYmFzZVNuYXBzaG90PFQ+O1xuICBwcmV2S2V5OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBvYnNlcnZhYmxlIGZyb20gYSBEYXRhYmFzZSBSZWZlcmVuY2Ugb3IgRGF0YWJhc2UgUXVlcnkuXG4gKiBAcGFyYW0gcmVmIERhdGFiYXNlIFJlZmVyZW5jZVxuICogQHBhcmFtIGV2ZW50IExpc3RlbiBldmVudCB0eXBlICgndmFsdWUnLCAnYWRkZWQnLCAnY2hhbmdlZCcsICdyZW1vdmVkJywgJ21vdmVkJylcbiAqIEBwYXJhbSBsaXN0ZW5UeXBlICdvbicgb3IgJ29uY2UnXG4gKiBAcGFyYW0gc2NoZWR1bGVyIC0gUnhqcyBzY2hlZHVsZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21SZWY8VD4ocmVmOiBEYXRhYmFzZVF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IExpc3RlbkV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuVHlwZSA9ICdvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZXI6IFNjaGVkdWxlckxpa2UgPSBhc3luY1NjaGVkdWxlclxuKTogT2JzZXJ2YWJsZTxBbmd1bGFyRmlyZUFjdGlvbjxEYXRhYmFzZVNuYXBzaG90PFQ+Pj4ge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGU8U25hcHNob3RQcmV2S2V5PFQ+PihzdWJzY3JpYmVyID0+IHtcbiAgICBsZXQgZm46IGFueSB8IG51bGwgPSBudWxsO1xuICAgIGZuID0gcmVmW2xpc3RlblR5cGVdKGV2ZW50LCAoc25hcHNob3QsIHByZXZLZXkpID0+IHtcbiAgICAgIHNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XG4gICAgICAgIHN1YnNjcmliZXIubmV4dCh7IHNuYXBzaG90LCBwcmV2S2V5IH0pO1xuICAgICAgfSk7XG4gICAgICBpZiAobGlzdGVuVHlwZSA9PT0gJ29uY2UnKSB7XG4gICAgICAgIHNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiBzdWJzY3JpYmVyLmNvbXBsZXRlKCkpO1xuICAgICAgfVxuICAgIH0sIGVyciA9PiB7XG4gICAgICBzY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4gc3Vic2NyaWJlci5lcnJvcihlcnIpKTtcbiAgICB9KTtcblxuICAgIGlmIChsaXN0ZW5UeXBlID09PSAnb24nKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICBpZiAoZm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVmLm9mZihldmVudCwgZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9KS5waXBlKFxuICAgIG1hcChwYXlsb2FkID0+IHtcbiAgICAgIGNvbnN0IHsgc25hcHNob3QsIHByZXZLZXkgfSA9IHBheWxvYWQ7XG4gICAgICBsZXQga2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xuICAgICAgICBrZXkgPSBzbmFwc2hvdC5rZXk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyB0eXBlOiBldmVudCwgcGF5bG9hZDogc25hcHNob3QsIHByZXZLZXksIGtleSB9O1xuICAgIH0pLFxuICAgIHNoYXJlKClcbiAgKTtcbn1cbiJdfQ==