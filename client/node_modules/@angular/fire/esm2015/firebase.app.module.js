/**
 * @fileoverview added by tsickle
 * Generated from: firebase.app.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, InjectionToken, isDevMode, NgModule, NgZone, Optional, PLATFORM_ID, VERSION as NG_VERSION, Version } from '@angular/core';
import firebase from 'firebase/app';
/**
 * @record
 */
export function FirebaseOptions() { }
/**
 * @record
 */
export function FirebaseAppConfig() { }
/** @type {?} */
export const FIREBASE_OPTIONS = new InjectionToken('angularfire2.app.options');
/** @type {?} */
export const FIREBASE_APP_NAME = new InjectionToken('angularfire2.app.nameOrConfig');
// Have to implement as we need to return a class from the provider, we should consider exporting
// this in the firebase/app types as this is our highest risk of breaks
export class FirebaseApp {
}
if (false) {
    /** @type {?} */
    FirebaseApp.prototype.name;
    /** @type {?} */
    FirebaseApp.prototype.options;
    /** @type {?} */
    FirebaseApp.prototype.analytics;
    /** @type {?} */
    FirebaseApp.prototype.auth;
    /** @type {?} */
    FirebaseApp.prototype.database;
    /** @type {?} */
    FirebaseApp.prototype.messaging;
    /** @type {?} */
    FirebaseApp.prototype.performance;
    /** @type {?} */
    FirebaseApp.prototype.storage;
    /** @type {?} */
    FirebaseApp.prototype.delete;
    /** @type {?} */
    FirebaseApp.prototype.firestore;
    /** @type {?} */
    FirebaseApp.prototype.functions;
    /** @type {?} */
    FirebaseApp.prototype.remoteConfig;
}
/** @type {?} */
export const VERSION = new Version('6.1.4');
/**
 * @param {?} options
 * @param {?} zone
 * @param {?=} nameOrConfig
 * @return {?}
 */
export function ɵfirebaseAppFactory(options, zone, nameOrConfig) {
    /** @type {?} */
    const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';
    /** @type {?} */
    const config = typeof nameOrConfig === 'object' && nameOrConfig || {};
    config.name = config.name || name;
    // Added any due to some inconsistency between @firebase/app and firebase types
    /** @type {?} */
    const existingApp = (/** @type {?} */ (firebase.apps.filter((/**
     * @param {?} app
     * @return {?}
     */
    app => app && app.name === config.name))[0]));
    // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any
    // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206
    /** @type {?} */
    const app = (/** @type {?} */ ((existingApp || zone.runOutsideAngular((/**
     * @return {?}
     */
    () => firebase.initializeApp(options, (/** @type {?} */ (config))))))));
    try {
        if (JSON.stringify(options) !== JSON.stringify(app.options)) {
            /** @type {?} */
            const hmr = !!((/** @type {?} */ (module))).hot;
            log('error', `${app.name} Firebase App already initialized with different options${hmr ? ', you may need to reload as Firebase is not HMR aware.' : '.'}`);
        }
    }
    catch (e) { }
    return app;
}
/** @type {?} */
export const ɵlogAuthEmulatorError = (/**
 * @return {?}
 */
() => {
    // TODO sort this out, https://github.com/angular/angularfire/issues/2656
    log('warn', 'You may need to import \'firebase/auth\' manually in your component rather than rely on AngularFireAuth\'s dynamic import, when using the emulator suite https://github.com/angular/angularfire/issues/2656');
});
/** @type {?} */
const log = (/**
 * @param {?} level
 * @param {...?} args
 * @return {?}
 */
(level, ...args) => {
    if (isDevMode() && typeof console !== 'undefined') {
        console[level](...args);
    }
});
const ɵ0 = log;
globalThis.ɵAngularfireInstanceCache || (globalThis.ɵAngularfireInstanceCache = new Map());
/**
 * @template T
 * @param {?} cacheKey
 * @param {?} moduleName
 * @param {?} app
 * @param {?} fn
 * @param {?} args
 * @return {?}
 */
export function ɵfetchInstance(cacheKey, moduleName, app, fn, args) {
    const [instance, ...cachedArgs] = globalThis.ɵAngularfireInstanceCache.get(cacheKey) || [];
    if (instance) {
        try {
            if (args.some((/**
             * @param {?} arg
             * @param {?} i
             * @return {?}
             */
            (arg, i) => {
                /** @type {?} */
                const cachedArg = cachedArgs[i];
                if (arg && typeof arg === 'object') {
                    return JSON.stringify(arg) !== JSON.stringify(cachedArg);
                }
                else {
                    return arg !== cachedArg;
                }
            }))) {
                /** @type {?} */
                const hmr = !!((/** @type {?} */ (module))).hot;
                log('error', `${moduleName} was already initialized on the ${app.name} Firebase App instance with different settings.${hmr ? ' You may need to reload as Firebase is not HMR aware.' : ''}`);
            }
        }
        catch (e) { }
        return instance;
    }
    else {
        /** @type {?} */
        const newInstance = fn();
        globalThis.ɵAngularfireInstanceCache.set(cacheKey, [newInstance, ...args]);
        return newInstance;
    }
}
/** @type {?} */
const FIREBASE_APP_PROVIDER = {
    provide: FirebaseApp,
    useFactory: ɵfirebaseAppFactory,
    deps: [
        FIREBASE_OPTIONS,
        NgZone,
        [new Optional(), FIREBASE_APP_NAME]
    ]
};
export class AngularFireModule {
    // tslint:disable-next-line:ban-types
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        firebase.registerVersion('angularfire', VERSION.full, platformId.toString());
        firebase.registerVersion('angular', NG_VERSION.full);
    }
    /**
     * @param {?} options
     * @param {?=} nameOrConfig
     * @return {?}
     */
    static initializeApp(options, nameOrConfig) {
        return {
            ngModule: AngularFireModule,
            providers: [
                { provide: FIREBASE_OPTIONS, useValue: options },
                { provide: FIREBASE_APP_NAME, useValue: nameOrConfig }
            ]
        };
    }
}
AngularFireModule.decorators = [
    { type: NgModule, args: [{
                providers: [FIREBASE_APP_PROVIDER]
            },] }
];
/** @nocollapse */
AngularFireModule.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuYXBwLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW5uZXIvd29yay9hbmd1bGFyZmlyZS9hbmd1bGFyZmlyZS9zcmMvY29yZS8iLCJzb3VyY2VzIjpbImZpcmViYXNlLmFwcC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQXVCLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLElBQUksVUFBVSxFQUFFLE9BQU8sRUFDaEksTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxRQUFRLE1BQU0sY0FBYyxDQUFDOzs7O0FBR3BDLHFDQUVDOzs7O0FBRUQsdUNBRUM7O0FBRUQsTUFBTSxPQUFPLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUFrQiwwQkFBMEIsQ0FBQzs7QUFDL0YsTUFBTSxPQUFPLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUF5QywrQkFBK0IsQ0FBQzs7O0FBSTVILE1BQU0sT0FBTyxXQUFXO0NBYXZCOzs7SUFaQywyQkFBYTs7SUFDYiw4QkFBWTs7SUFDWixnQ0FBOEM7O0lBQzlDLDJCQUErQjs7SUFDL0IsK0JBQStEOztJQUMvRCxnQ0FBOEM7O0lBQzlDLGtDQUFvRDs7SUFDcEQsOEJBQThEOztJQUM5RCw2QkFBNEI7O0lBQzVCLGdDQUE4Qzs7SUFDOUMsZ0NBQTZEOztJQUM3RCxtQ0FBdUQ7OztBQUd6RCxNQUFNLE9BQU8sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLHNCQUFzQixDQUFDOzs7Ozs7O0FBRTFELE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxPQUF3QixFQUFFLElBQVksRUFBRSxZQUFnRDs7VUFDcEgsSUFBSSxHQUFHLE9BQU8sWUFBWSxLQUFLLFFBQVEsSUFBSSxZQUFZLElBQUksV0FBVzs7VUFDdEUsTUFBTSxHQUFHLE9BQU8sWUFBWSxLQUFLLFFBQVEsSUFBSSxZQUFZLElBQUks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dGlvblRva2VuLCBpc0Rldk1vZGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLCBOZ1pvbmUsIE9wdGlvbmFsLCBQTEFURk9STV9JRCwgVkVSU0lPTiBhcyBOR19WRVJTSU9OLCBWZXJzaW9uXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5cbi8vIElOVkVTVElHQVRFIFB1YmxpYyB0eXBlcyBkb24ndCBleHBvc2UgRmlyZWJhc2VPcHRpb25zIG9yIEZpcmViYXNlQXBwQ29uZmlnLCBpcyB0aGlzIHRoZSBjYXNlIGFueWxvbmdlcj9cbmV4cG9ydCBpbnRlcmZhY2UgRmlyZWJhc2VPcHRpb25zIHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpcmViYXNlQXBwQ29uZmlnIHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgY29uc3QgRklSRUJBU0VfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxGaXJlYmFzZU9wdGlvbnM+KCdhbmd1bGFyZmlyZTIuYXBwLm9wdGlvbnMnKTtcbmV4cG9ydCBjb25zdCBGSVJFQkFTRV9BUFBfTkFNRSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IHVuZGVmaW5lZD4oJ2FuZ3VsYXJmaXJlMi5hcHAubmFtZU9yQ29uZmlnJyk7XG5cbi8vIEhhdmUgdG8gaW1wbGVtZW50IGFzIHdlIG5lZWQgdG8gcmV0dXJuIGEgY2xhc3MgZnJvbSB0aGUgcHJvdmlkZXIsIHdlIHNob3VsZCBjb25zaWRlciBleHBvcnRpbmdcbi8vIHRoaXMgaW4gdGhlIGZpcmViYXNlL2FwcCB0eXBlcyBhcyB0aGlzIGlzIG91ciBoaWdoZXN0IHJpc2sgb2YgYnJlYWtzXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VBcHAgaW1wbGVtZW50cyBQYXJ0aWFsPGZpcmViYXNlLmFwcC5BcHA+IHtcbiAgbmFtZTogc3RyaW5nO1xuICBvcHRpb25zOiB7fTtcbiAgYW5hbHl0aWNzOiAoKSA9PiBmaXJlYmFzZS5hbmFseXRpY3MuQW5hbHl0aWNzO1xuICBhdXRoOiAoKSA9PiBmaXJlYmFzZS5hdXRoLkF1dGg7XG4gIGRhdGFiYXNlOiAoZGF0YWJhc2VVUkw/OiBzdHJpbmcpID0+IGZpcmViYXNlLmRhdGFiYXNlLkRhdGFiYXNlO1xuICBtZXNzYWdpbmc6ICgpID0+IGZpcmViYXNlLm1lc3NhZ2luZy5NZXNzYWdpbmc7XG4gIHBlcmZvcm1hbmNlOiAoKSA9PiBmaXJlYmFzZS5wZXJmb3JtYW5jZS5QZXJmb3JtYW5jZTtcbiAgc3RvcmFnZTogKHN0b3JhZ2VCdWNrZXQ/OiBzdHJpbmcpID0+IGZpcmViYXNlLnN0b3JhZ2UuU3RvcmFnZTtcbiAgZGVsZXRlOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBmaXJlc3RvcmU6ICgpID0+IGZpcmViYXNlLmZpcmVzdG9yZS5GaXJlc3RvcmU7XG4gIGZ1bmN0aW9uczogKHJlZ2lvbj86IHN0cmluZykgPT4gZmlyZWJhc2UuZnVuY3Rpb25zLkZ1bmN0aW9ucztcbiAgcmVtb3RlQ29uZmlnOiAoKSA9PiBmaXJlYmFzZS5yZW1vdGVDb25maWcuUmVtb3RlQ29uZmlnO1xufVxuXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9IG5ldyBWZXJzaW9uKCdBTkdVTEFSRklSRTJfVkVSU0lPTicpO1xuXG5leHBvcnQgZnVuY3Rpb24gybVmaXJlYmFzZUFwcEZhY3Rvcnkob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCB6b25lOiBOZ1pvbmUsIG5hbWVPckNvbmZpZz86IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgbnVsbCkge1xuICBjb25zdCBuYW1lID0gdHlwZW9mIG5hbWVPckNvbmZpZyA9PT0gJ3N0cmluZycgJiYgbmFtZU9yQ29uZmlnIHx8ICdbREVGQVVMVF0nO1xuICBjb25zdCBjb25maWcgPSB0eXBlb2YgbmFtZU9yQ29uZmlnID09PSAnb2JqZWN0JyAmJiBuYW1lT3JDb25maWcgfHwge307XG4gIGNvbmZpZy5uYW1lID0gY29uZmlnLm5hbWUgfHwgbmFtZTtcbiAgLy8gQWRkZWQgYW55IGR1ZSB0byBzb21lIGluY29uc2lzdGVuY3kgYmV0d2VlbiBAZmlyZWJhc2UvYXBwIGFuZCBmaXJlYmFzZSB0eXBlc1xuICBjb25zdCBleGlzdGluZ0FwcCA9IGZpcmViYXNlLmFwcHMuZmlsdGVyKGFwcCA9PiBhcHAgJiYgYXBwLm5hbWUgPT09IGNvbmZpZy5uYW1lKVswXSBhcyBhbnk7XG4gIC8vIFdlIHN1cHBvcnQgRmlyZWJhc2VDb25maWcsIGluaXRpYWxpemVBcHAncyBwdWJsaWMgdHlwZSBvbmx5IGFjY2VwdHMgc3RyaW5nOyBuZWVkIHRvIGNhc3QgYXMgYW55XG4gIC8vIENvdWxkIGJlIHNvbHZlZCB3aXRoIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1qcy1zZGsvcHVsbC8xMjA2XG4gIGNvbnN0IGFwcCA9IChleGlzdGluZ0FwcCB8fCB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGZpcmViYXNlLmluaXRpYWxpemVBcHAob3B0aW9ucywgY29uZmlnIGFzIGFueSkpKSBhcyBGaXJlYmFzZUFwcDtcbiAgdHJ5IHtcbiAgICBpZiAoSlNPTi5zdHJpbmdpZnkob3B0aW9ucykgIT09IEpTT04uc3RyaW5naWZ5KGFwcC5vcHRpb25zKSkge1xuICAgICAgY29uc3QgaG1yID0gISEobW9kdWxlIGFzIGFueSkuaG90O1xuICAgICAgbG9nKCdlcnJvcicsIGAke2FwcC5uYW1lfSBGaXJlYmFzZSBBcHAgYWxyZWFkeSBpbml0aWFsaXplZCB3aXRoIGRpZmZlcmVudCBvcHRpb25zJHtobXIgPyAnLCB5b3UgbWF5IG5lZWQgdG8gcmVsb2FkIGFzIEZpcmViYXNlIGlzIG5vdCBITVIgYXdhcmUuJyA6ICcuJ31gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuICByZXR1cm4gYXBwO1xufVxuXG5leHBvcnQgY29uc3QgybVsb2dBdXRoRW11bGF0b3JFcnJvciA9ICgpID0+IHtcbiAgLy8gVE9ETyBzb3J0IHRoaXMgb3V0LCBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyZmlyZS9pc3N1ZXMvMjY1NlxuICBsb2coJ3dhcm4nLCAnWW91IG1heSBuZWVkIHRvIGltcG9ydCBcXCdmaXJlYmFzZS9hdXRoXFwnIG1hbnVhbGx5IGluIHlvdXIgY29tcG9uZW50IHJhdGhlciB0aGFuIHJlbHkgb24gQW5ndWxhckZpcmVBdXRoXFwncyBkeW5hbWljIGltcG9ydCwgd2hlbiB1c2luZyB0aGUgZW11bGF0b3Igc3VpdGUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhcmZpcmUvaXNzdWVzLzI2NTYnKTtcbn07XG5cbmNvbnN0IGxvZyA9IChsZXZlbDogJ2xvZyd8J2Vycm9yJ3wnaW5mbyd8J3dhcm4nLCAuLi5hcmdzOiBhbnkpID0+IHtcbiAgaWYgKGlzRGV2TW9kZSgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGVbbGV2ZWxdKC4uLmFyZ3MpO1xuICB9XG59O1xuXG5nbG9iYWxUaGlzLsm1QW5ndWxhcmZpcmVJbnN0YW5jZUNhY2hlIHx8PSBuZXcgTWFwKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiDJtWZldGNoSW5zdGFuY2U8VD4oY2FjaGVLZXk6IGFueSwgbW9kdWxlTmFtZTogc3RyaW5nLCBhcHA6IEZpcmViYXNlQXBwLCBmbjogKCkgPT4gVCwgYXJnczogYW55W10pOiBUIHtcbiAgY29uc3QgW2luc3RhbmNlLCAuLi5jYWNoZWRBcmdzXSA9IGdsb2JhbFRoaXMuybVBbmd1bGFyZmlyZUluc3RhbmNlQ2FjaGUuZ2V0KGNhY2hlS2V5KSB8fCBbXTtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChhcmdzLnNvbWUoKGFyZywgaSkgPT4ge1xuICAgICAgICBjb25zdCBjYWNoZWRBcmcgPSBjYWNoZWRBcmdzW2ldO1xuICAgICAgICBpZiAoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZykgIT09IEpTT04uc3RyaW5naWZ5KGNhY2hlZEFyZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGFyZyAhPT0gY2FjaGVkQXJnO1xuICAgICAgICB9XG4gICAgICB9KSkge1xuICAgICAgICBjb25zdCBobXIgPSAhIShtb2R1bGUgYXMgYW55KS5ob3Q7XG4gICAgICAgIGxvZygnZXJyb3InLCBgJHttb2R1bGVOYW1lfSB3YXMgYWxyZWFkeSBpbml0aWFsaXplZCBvbiB0aGUgJHthcHAubmFtZX0gRmlyZWJhc2UgQXBwIGluc3RhbmNlIHdpdGggZGlmZmVyZW50IHNldHRpbmdzLiR7aG1yID8gJyBZb3UgbWF5IG5lZWQgdG8gcmVsb2FkIGFzIEZpcmViYXNlIGlzIG5vdCBITVIgYXdhcmUuJyA6ICcnfWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHsgfVxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBuZXdJbnN0YW5jZSA9IGZuKCk7XG4gICAgZ2xvYmFsVGhpcy7JtUFuZ3VsYXJmaXJlSW5zdGFuY2VDYWNoZS5zZXQoY2FjaGVLZXksIFtuZXdJbnN0YW5jZSwgLi4uYXJnc10pO1xuICAgIHJldHVybiBuZXdJbnN0YW5jZTtcbiAgfVxufVxuXG5jb25zdCBGSVJFQkFTRV9BUFBfUFJPVklERVIgPSB7XG4gIHByb3ZpZGU6IEZpcmViYXNlQXBwLFxuICB1c2VGYWN0b3J5OiDJtWZpcmViYXNlQXBwRmFjdG9yeSxcbiAgZGVwczogW1xuICAgIEZJUkVCQVNFX09QVElPTlMsXG4gICAgTmdab25lLFxuICAgIFtuZXcgT3B0aW9uYWwoKSwgRklSRUJBU0VfQVBQX05BTUVdXG4gIF1cbn07XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW0ZJUkVCQVNFX0FQUF9QUk9WSURFUl1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckZpcmVNb2R1bGUge1xuICBzdGF0aWMgaW5pdGlhbGl6ZUFwcChvcHRpb25zOiBGaXJlYmFzZU9wdGlvbnMsIG5hbWVPckNvbmZpZz86IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVyczxBbmd1bGFyRmlyZU1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQW5ndWxhckZpcmVNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge3Byb3ZpZGU6IEZJUkVCQVNFX09QVElPTlMsIHVzZVZhbHVlOiBvcHRpb25zfSxcbiAgICAgICAge3Byb3ZpZGU6IEZJUkVCQVNFX0FQUF9OQU1FLCB1c2VWYWx1ZTogbmFtZU9yQ29uZmlnfVxuICAgICAgXVxuICAgIH07XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IE9iamVjdCkge1xuICAgIGZpcmViYXNlLnJlZ2lzdGVyVmVyc2lvbignYW5ndWxhcmZpcmUnLCBWRVJTSU9OLmZ1bGwsIHBsYXRmb3JtSWQudG9TdHJpbmcoKSk7XG4gICAgZmlyZWJhc2UucmVnaXN0ZXJWZXJzaW9uKCdhbmd1bGFyJywgTkdfVkVSU0lPTi5mdWxsKTtcbiAgfVxufVxuIl19