/**
 * @fileoverview added by tsickle
 * Generated from: observable/fromTask.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Observable } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
// Things aren't working great, I'm having to put in a lot of work-arounds for what
// appear to be Firebase JS SDK bugs https://github.com/firebase/firebase-js-sdk/issues/4158
/**
 * @param {?} task
 * @return {?}
 */
export function fromTask(task) {
    return new Observable((/**
     * @param {?} subscriber
     * @return {?}
     */
    subscriber => {
        /** @type {?} */
        const progress = (/**
         * @param {?} snap
         * @return {?}
         */
        (snap) => subscriber.next(snap));
        /** @type {?} */
        const error = (/**
         * @param {?} e
         * @return {?}
         */
        e => subscriber.error(e));
        /** @type {?} */
        const complete = (/**
         * @return {?}
         */
        () => subscriber.complete());
        // emit the current snapshot, so they don't have to wait for state_changes
        // to fire next... this is stale if the task is no longer running :(
        progress(task.snapshot);
        /** @type {?} */
        const unsub = task.on('state_changed', progress);
        // it turns out that neither task snapshot nor 'state_changed' fire the last
        // snapshot before completion, the one with status 'success" and 100% progress
        // so let's use the promise form of the task for that
        task.then((/**
         * @param {?} snapshot
         * @return {?}
         */
        snapshot => {
            progress(snapshot);
            complete();
        }), (/**
         * @param {?} e
         * @return {?}
         */
        e => {
            // TODO investigate, again this is stale, we never fire a canceled or error it seems
            progress(task.snapshot);
            error(e);
        }));
        // on's type if Function, rather than () => void, need to wrap
        return (/**
         * @return {?}
         */
        function unsubscribe() {
            unsub();
        });
    })).pipe(
    // deal with sync emissions from first emitting `task.snapshot`, this makes sure
    // that if the task is already finished we don't emit the old running state
    debounceTime(0));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVRhc2suanMiLCJzb3VyY2VSb290IjoiL2hvbWUvcnVubmVyL3dvcmsvYW5ndWxhcmZpcmUvYW5ndWxhcmZpcmUvc3JjL3N0b3JhZ2UvIiwic291cmNlcyI6WyJvYnNlcnZhYmxlL2Zyb21UYXNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7QUFTOUMsTUFBTSxVQUFVLFFBQVEsQ0FBQyxJQUFnQjtJQUN2QyxPQUFPLElBQUksVUFBVTs7OztJQUFxQixVQUFVLENBQUMsRUFBRTs7Y0FDL0MsUUFBUTs7OztRQUFHLENBQUMsSUFBd0IsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTs7Y0FDOUQsS0FBSzs7OztRQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTs7Y0FDaEMsUUFBUTs7O1FBQUcsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQzVDLDBFQUEwRTtRQUMxRSxvRUFBb0U7UUFDcEUsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Y0FDbEIsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQztRQUNoRCw0RUFBNEU7UUFDNUUsOEVBQThFO1FBQzlFLHFEQUFxRDtRQUNyRCxJQUFJLENBQUMsSUFBSTs7OztRQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ25CLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuQixRQUFRLEVBQUUsQ0FBQztRQUNiLENBQUM7Ozs7UUFBRSxDQUFDLENBQUMsRUFBRTtZQUNMLG9GQUFvRjtZQUNwRixRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsRUFBQyxDQUFDO1FBQ0gsOERBQThEO1FBQzlEOzs7UUFBTyxTQUFTLFdBQVc7WUFDekIsS0FBSyxFQUFFLENBQUM7UUFDVixDQUFDLEVBQUM7SUFDSixDQUFDLEVBQUMsQ0FBQyxJQUFJO0lBQ0wsZ0ZBQWdGO0lBQ2hGLDJFQUEyRTtJQUMzRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQ2hCLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVXBsb2FkVGFzaywgVXBsb2FkVGFza1NuYXBzaG90IH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbi8vIG5lZWQgdG8gaW1wb3J0LCBlbHNlIHRoZSB0eXBlcyBiZWNvbWUgaW1wb3J0KCdmaXJlYmFzZS9hcHAnKS5kZWZhdWx0LnN0b3JhZ2UuVXBsb2FkVGFza1xuLy8gYW5kIGl0IG5vIGxvbmdlciB3b3JrcyB3L0ZpcmViYXNlIHY3XG5pbXBvcnQgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UvYXBwJztcblxuLy8gVGhpbmdzIGFyZW4ndCB3b3JraW5nIGdyZWF0LCBJJ20gaGF2aW5nIHRvIHB1dCBpbiBhIGxvdCBvZiB3b3JrLWFyb3VuZHMgZm9yIHdoYXRcbi8vIGFwcGVhciB0byBiZSBGaXJlYmFzZSBKUyBTREsgYnVncyBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL2lzc3Vlcy80MTU4XG5leHBvcnQgZnVuY3Rpb24gZnJvbVRhc2sodGFzazogVXBsb2FkVGFzaykge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGU8VXBsb2FkVGFza1NuYXBzaG90PihzdWJzY3JpYmVyID0+IHtcbiAgICBjb25zdCBwcm9ncmVzcyA9IChzbmFwOiBVcGxvYWRUYXNrU25hcHNob3QpID0+IHN1YnNjcmliZXIubmV4dChzbmFwKTtcbiAgICBjb25zdCBlcnJvciA9IGUgPT4gc3Vic2NyaWJlci5lcnJvcihlKTtcbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAvLyBlbWl0IHRoZSBjdXJyZW50IHNuYXBzaG90LCBzbyB0aGV5IGRvbid0IGhhdmUgdG8gd2FpdCBmb3Igc3RhdGVfY2hhbmdlc1xuICAgIC8vIHRvIGZpcmUgbmV4dC4uLiB0aGlzIGlzIHN0YWxlIGlmIHRoZSB0YXNrIGlzIG5vIGxvbmdlciBydW5uaW5nIDooXG4gICAgcHJvZ3Jlc3ModGFzay5zbmFwc2hvdCk7XG4gICAgY29uc3QgdW5zdWIgPSB0YXNrLm9uKCdzdGF0ZV9jaGFuZ2VkJywgcHJvZ3Jlc3MpO1xuICAgIC8vIGl0IHR1cm5zIG91dCB0aGF0IG5laXRoZXIgdGFzayBzbmFwc2hvdCBub3IgJ3N0YXRlX2NoYW5nZWQnIGZpcmUgdGhlIGxhc3RcbiAgICAvLyBzbmFwc2hvdCBiZWZvcmUgY29tcGxldGlvbiwgdGhlIG9uZSB3aXRoIHN0YXR1cyAnc3VjY2Vzc1wiIGFuZCAxMDAlIHByb2dyZXNzXG4gICAgLy8gc28gbGV0J3MgdXNlIHRoZSBwcm9taXNlIGZvcm0gb2YgdGhlIHRhc2sgZm9yIHRoYXRcbiAgICB0YXNrLnRoZW4oc25hcHNob3QgPT4ge1xuICAgICAgcHJvZ3Jlc3Moc25hcHNob3QpO1xuICAgICAgY29tcGxldGUoKTtcbiAgICB9LCBlID0+IHtcbiAgICAgIC8vIFRPRE8gaW52ZXN0aWdhdGUsIGFnYWluIHRoaXMgaXMgc3RhbGUsIHdlIG5ldmVyIGZpcmUgYSBjYW5jZWxlZCBvciBlcnJvciBpdCBzZWVtc1xuICAgICAgcHJvZ3Jlc3ModGFzay5zbmFwc2hvdCk7XG4gICAgICBlcnJvcihlKTtcbiAgICB9KTtcbiAgICAvLyBvbidzIHR5cGUgaWYgRnVuY3Rpb24sIHJhdGhlciB0aGFuICgpID0+IHZvaWQsIG5lZWQgdG8gd3JhcFxuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIHVuc3ViKCk7XG4gICAgfTtcbiAgfSkucGlwZShcbiAgICAvLyBkZWFsIHdpdGggc3luYyBlbWlzc2lvbnMgZnJvbSBmaXJzdCBlbWl0dGluZyBgdGFzay5zbmFwc2hvdGAsIHRoaXMgbWFrZXMgc3VyZVxuICAgIC8vIHRoYXQgaWYgdGhlIHRhc2sgaXMgYWxyZWFkeSBmaW5pc2hlZCB3ZSBkb24ndCBlbWl0IHRoZSBvbGQgcnVubmluZyBzdGF0ZVxuICAgIGRlYm91bmNlVGltZSgwKVxuICApO1xufVxuIl19