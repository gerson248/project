import { __awaiter } from 'tslib';
import { InjectionToken, Injectable, Optional, Inject, PLATFORM_ID, NgZone, ɵɵdefineInjectable, ɵɵinject, ComponentFactoryResolver, NgModule } from '@angular/core';
import { of, EMPTY } from 'rxjs';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { observeOn, switchMap, map, shareReplay, filter, groupBy, mergeMap, distinctUntilChanged, startWith, pairwise } from 'rxjs/operators';
import { ɵAngularFireSchedulers, ɵfetchInstance, ɵlazySDKProxy, FirebaseApp, ɵapplyMixins } from '@angular/fire';
import { ActivationEnd, ɵEmptyOutletComponent, Router } from '@angular/router';
import { Title } from '@angular/platform-browser';
import { AngularFireAuth } from '@angular/fire/auth';

/**
 * @fileoverview added by tsickle
 * Generated from: base.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const proxyPolyfillCompat = {
    app: null,
    logEvent: null,
    setCurrentScreen: null,
    setUserId: null,
    setUserProperties: null,
    setAnalyticsCollectionEnabled: null,
};

/**
 * @fileoverview added by tsickle
 * Generated from: analytics.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Config() { }
/** @type {?} */
const COLLECTION_ENABLED = new InjectionToken('angularfire2.analytics.analyticsCollectionEnabled');
/** @type {?} */
const APP_VERSION = new InjectionToken('angularfire2.analytics.appVersion');
/** @type {?} */
const APP_NAME = new InjectionToken('angularfire2.analytics.appName');
/** @type {?} */
const DEBUG_MODE = new InjectionToken('angularfire2.analytics.debugMode');
/** @type {?} */
const CONFIG = new InjectionToken('angularfire2.analytics.config');
/** @type {?} */
const APP_NAME_KEY = 'app_name';
/** @type {?} */
const APP_VERSION_KEY = 'app_version';
/** @type {?} */
const DEBUG_MODE_KEY = 'debug_mode';
/** @type {?} */
const GTAG_CONFIG_COMMAND = 'config';
/** @type {?} */
const GTAG_FUNCTION_NAME = 'gtag';
// TODO rename these
/** @type {?} */
const DATA_LAYER_NAME = 'dataLayer';
/** @type {?} */
const SEND_TO_KEY = 'send_to';
// WARNING: interface has both a type and a value, skipping emit
class AngularFireAnalytics {
    /**
     * @param {?} app
     * @param {?} analyticsCollectionEnabled
     * @param {?} providedAppVersion
     * @param {?} providedAppName
     * @param {?} debugModeEnabled
     * @param {?} providedConfig
     * @param {?} platformId
     * @param {?} zone
     */
    constructor(app, analyticsCollectionEnabled, providedAppVersion, providedAppName, debugModeEnabled, providedConfig, 
    // tslint:disable-next-line:ban-types
    platformId, zone) {
        this.analyticsInitialized = new Promise((/**
         * @return {?}
         */
        () => { }));
        if (isPlatformBrowser(platformId)) {
            window[DATA_LAYER_NAME] = window[DATA_LAYER_NAME] || [];
            // It turns out we can't rely on the measurementId in the Firebase config JSON
            // this identifier is not stable. firebase/analytics does a call to get a fresh value
            // falling back on the one in the config. Rather than do that ourselves we should listen
            // on our gtag function for a analytics config command
            // e.g, ['config', measurementId, { origin: 'firebase', firebase_id }]
            /** @type {?} */
            const parseMeasurementId = (/**
             * @param {...?} args
             * @return {?}
             */
            (...args) => {
                if (args[0] === 'config' && args[2].origin === 'firebase') {
                    this.measurementId = args[1];
                    return true;
                }
                else {
                    return false;
                }
            });
            /** @type {?} */
            const patchGtag = (/**
             * @param {?=} fn
             * @return {?}
             */
            (fn) => {
                window[GTAG_FUNCTION_NAME] = (/**
                 * @param {...?} args
                 * @return {?}
                 */
                (...args) => {
                    if (fn) {
                        fn(...args);
                    }
                    // Inject app_name and app_version into events
                    // TODO(jamesdaniels): I'm doing this as documented but it's still not
                    //   showing up in the console. Investigate. Guessing it's just part of the
                    //   whole GA4 transition mess.
                    if (args[0] === 'event' && args[2][SEND_TO_KEY] === this.measurementId) {
                        if (providedAppName) {
                            args[2][APP_NAME_KEY] = providedAppName;
                        }
                        if (providedAppVersion) {
                            args[2][APP_VERSION_KEY] = providedAppVersion;
                        }
                    }
                    if (debugModeEnabled && typeof console !== 'undefined') {
                        // tslint:disable-next-line:no-console
                        console.info(...args);
                    }
                    /**
                     * According to the gtag documentation, this function that defines a custom data layer cannot be
                     * an arrow function because 'arguments' is not an array. It is actually an object that behaves
                     * like an array and contains more information then just indexes. Transforming this into arrow function
                     * caused issue #2505 where analytics no longer sent any data.
                     */
                    // tslint:disable-next-line: only-arrow-functions
                    ((/**
                     * @param {...?} _args
                     * @return {?}
                     */
                    function (..._args) {
                        window[DATA_LAYER_NAME].push(arguments);
                    }))(...args);
                });
            });
            // Unclear if we still need to but I was running into config/events I passed
            // to gtag before ['js' timestamp] weren't getting parsed, so let's make a promise
            // that resolves when firebase/analytics has configured gtag.js that we wait on
            // before sending anything
            /** @type {?} */
            const firebaseAnalyticsAlreadyInitialized = window[DATA_LAYER_NAME].some(parseMeasurementId);
            if (firebaseAnalyticsAlreadyInitialized) {
                this.analyticsInitialized = Promise.resolve();
                patchGtag();
            }
            else {
                this.analyticsInitialized = new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                resolve => {
                    patchGtag((/**
                     * @param {...?} args
                     * @return {?}
                     */
                    (...args) => {
                        if (parseMeasurementId(...args)) {
                            resolve();
                        }
                    }));
                }));
            }
            if (providedConfig) {
                this.updateConfig(providedConfig);
            }
            if (debugModeEnabled) {
                this.updateConfig({ [DEBUG_MODE_KEY]: 1 });
            }
        }
        else {
            this.analyticsInitialized = Promise.resolve();
        }
        /** @type {?} */
        const analytics = of(undefined).pipe(observeOn(new ɵAngularFireSchedulers(zone).outsideAngular), switchMap((/**
         * @return {?}
         */
        () => isPlatformBrowser(platformId) ? zone.runOutsideAngular((/**
         * @return {?}
         */
        () => import('firebase/analytics'))) : EMPTY)), 
        // SEMVER can switch to isSupported() when we only target v8
        // switchMap(() => firebase.analytics.isSupported().then(it => it, () => false)),
        // TODO server-side investigate use of the Universal Analytics API
        // switchMap(supported => supported ? of(undefined) : EMPTY),
        map((/**
         * @return {?}
         */
        () => {
            return ɵfetchInstance(`analytics`, 'AngularFireAnalytics', app, (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const analytics = app.analytics();
                if (analyticsCollectionEnabled === false) {
                    analytics.setAnalyticsCollectionEnabled(false);
                }
                return analytics;
            }), [app, analyticsCollectionEnabled, providedConfig, debugModeEnabled]);
        })), shareReplay({ bufferSize: 1, refCount: false }));
        return ɵlazySDKProxy(this, analytics, zone);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    updateConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.analyticsInitialized;
            window[GTAG_FUNCTION_NAME](GTAG_CONFIG_COMMAND, this.measurementId, Object.assign(Object.assign({}, config), { update: true }));
        });
    }
}
AngularFireAnalytics.decorators = [
    { type: Injectable, args: [{
                providedIn: 'any'
            },] }
];
/** @nocollapse */
AngularFireAnalytics.ctorParameters = () => [
    { type: FirebaseApp },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COLLECTION_ENABLED,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_VERSION,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_NAME,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DEBUG_MODE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONFIG,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone }
];
/** @nocollapse */ AngularFireAnalytics.ɵprov = ɵɵdefineInjectable({ factory: function AngularFireAnalytics_Factory() { return new AngularFireAnalytics(ɵɵinject(FirebaseApp), ɵɵinject(COLLECTION_ENABLED, 8), ɵɵinject(APP_VERSION, 8), ɵɵinject(APP_NAME, 8), ɵɵinject(DEBUG_MODE, 8), ɵɵinject(CONFIG, 8), ɵɵinject(PLATFORM_ID), ɵɵinject(NgZone)); }, token: AngularFireAnalytics, providedIn: "any" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularFireAnalytics.prototype.measurementId;
    /**
     * @type {?}
     * @private
     */
    AngularFireAnalytics.prototype.analyticsInitialized;
}
ɵapplyMixins(AngularFireAnalytics, [proxyPolyfillCompat]);

/**
 * @fileoverview added by tsickle
 * Generated from: user-tracking.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UserTrackingService {
    // TODO a user properties injector
    /**
     * @param {?} analytics
     * @param {?} platformId
     * @param {?} auth
     * @param {?} zone
     */
    constructor(analytics, 
    // tslint:disable-next-line:ban-types
    platformId, auth, zone) {
        this.disposables = [];
        if (!isPlatformServer(platformId)) {
            /** @type {?} */
            let resolveInitialized;
            this.initialized = zone.runOutsideAngular((/**
             * @return {?}
             */
            () => new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            resolve => resolveInitialized = resolve))));
            this.disposables = [
                auth.authState.subscribe((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => {
                    analytics.setUserId(user === null || user === void 0 ? void 0 : user.uid);
                    resolveInitialized();
                })),
                auth.credential.subscribe((/**
                 * @param {?} credential
                 * @return {?}
                 */
                credential => {
                    if (credential) {
                        /** @type {?} */
                        const method = credential.user.isAnonymous ? 'anonymous' : credential.additionalUserInfo.providerId;
                        if (credential.additionalUserInfo.isNewUser) {
                            analytics.logEvent('sign_up', { method });
                        }
                        analytics.logEvent('login', { method });
                    }
                }))
            ];
        }
        else {
            this.initialized = Promise.resolve();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposables.forEach((/**
         * @param {?} it
         * @return {?}
         */
        it => it.unsubscribe()));
    }
}
UserTrackingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UserTrackingService.ctorParameters = () => [
    { type: AngularFireAnalytics },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AngularFireAuth },
    { type: NgZone }
];
if (false) {
    /** @type {?} */
    UserTrackingService.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    UserTrackingService.prototype.disposables;
}

/**
 * @fileoverview added by tsickle
 * Generated from: screen-tracking.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FIREBASE_EVENT_ORIGIN_KEY = 'firebase_event_origin';
/** @type {?} */
const FIREBASE_PREVIOUS_SCREEN_CLASS_KEY = 'firebase_previous_class';
/** @type {?} */
const FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY = 'firebase_previous_id';
/** @type {?} */
const FIREBASE_PREVIOUS_SCREEN_NAME_KEY = 'firebase_previous_screen';
/** @type {?} */
const FIREBASE_SCREEN_CLASS_KEY = 'firebase_screen_class';
/** @type {?} */
const FIREBASE_SCREEN_INSTANCE_ID_KEY = 'firebase_screen_id';
/** @type {?} */
const FIREBASE_SCREEN_NAME_KEY = 'firebase_screen';
/** @type {?} */
const OUTLET_KEY = 'outlet';
/** @type {?} */
const PAGE_PATH_KEY = 'page_path';
/** @type {?} */
const PAGE_TITLE_KEY = 'page_title';
/** @type {?} */
const SCREEN_CLASS_KEY = 'screen_class';
/** @type {?} */
const SCREEN_NAME_KEY = 'screen_name';
/** @type {?} */
const SCREEN_VIEW_EVENT = 'screen_view';
/** @type {?} */
const EVENT_ORIGIN_AUTO = 'auto';
/** @type {?} */
const SCREEN_INSTANCE_DELIMITER = '#';
// this is an INT64 in iOS/Android but use INT32 cause javascript
/** @type {?} */
let nextScreenInstanceID = Math.floor(Math.random() * (Math.pow(2, 32) - 1)) - Math.pow(2, 31);
/** @type {?} */
const knownScreenInstanceIDs = {};
/** @type {?} */
const getScreenInstanceID = (/**
 * @param {?} params
 * @return {?}
 */
(params) => {
    // unique the screen class against the outlet name
    /** @type {?} */
    const screenInstanceKey = [
        params[SCREEN_CLASS_KEY],
        params[OUTLET_KEY]
    ].join(SCREEN_INSTANCE_DELIMITER);
    if (knownScreenInstanceIDs.hasOwnProperty(screenInstanceKey)) {
        return knownScreenInstanceIDs[screenInstanceKey];
    }
    else {
        /** @type {?} */
        const ret = nextScreenInstanceID++;
        knownScreenInstanceIDs[screenInstanceKey] = ret;
        return ret;
    }
});
const ɵ0 = getScreenInstanceID;
class ScreenTrackingService {
    /**
     * @param {?} analytics
     * @param {?} router
     * @param {?} title
     * @param {?} componentFactoryResolver
     * @param {?} platformId
     * @param {?} zone
     * @param {?} userTrackingService
     */
    constructor(analytics, router, title, componentFactoryResolver, 
    // tslint:disable-next-line:ban-types
    platformId, zone, userTrackingService) {
        if (!router || !isPlatformBrowser(platformId)) {
            return this;
        }
        zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const activationEndEvents = router.events.pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e instanceof ActivationEnd)));
            this.disposable = activationEndEvents.pipe(switchMap((/**
             * @param {?} activationEnd
             * @return {?}
             */
            activationEnd => {
                var _a;
                // router parseUrl is having trouble with outlets when they're empty
                // e.g, /asdf/1(bob://sally:asdf), so put another slash in when empty
                /** @type {?} */
                const urlTree = router.parseUrl(router.url.replace(/(?:\().+(?:\))/g, (/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.replace('://', ':///'))));
                /** @type {?} */
                const pagePath = ((_a = urlTree.root.children[activationEnd.snapshot.outlet]) === null || _a === void 0 ? void 0 : _a.toString()) || '';
                /** @type {?} */
                const actualSnapshot = router.routerState.root.children.map((/**
                 * @param {?} it
                 * @return {?}
                 */
                it => it)).find((/**
                 * @param {?} it
                 * @return {?}
                 */
                it => it.outlet === activationEnd.snapshot.outlet));
                if (!actualSnapshot) {
                    return of(null);
                }
                /** @type {?} */
                let actualDeep = actualSnapshot;
                while (actualDeep.firstChild) {
                    actualDeep = actualDeep.firstChild;
                }
                /** @type {?} */
                const screenName = actualDeep.pathFromRoot.map((/**
                 * @param {?} s
                 * @return {?}
                 */
                s => { var _a; return (_a = s.routeConfig) === null || _a === void 0 ? void 0 : _a.path; })).filter((/**
                 * @param {?} it
                 * @return {?}
                 */
                it => it)).join('/') || '/';
                /** @type {?} */
                const params = {
                    [SCREEN_NAME_KEY]: screenName,
                    [PAGE_PATH_KEY]: `/${pagePath}`,
                    [FIREBASE_EVENT_ORIGIN_KEY]: EVENT_ORIGIN_AUTO,
                    [FIREBASE_SCREEN_NAME_KEY]: screenName,
                    [OUTLET_KEY]: activationEnd.snapshot.outlet
                };
                if (title) {
                    params[PAGE_TITLE_KEY] = title.getTitle();
                }
                /** @type {?} */
                let component = actualSnapshot.component;
                if (component) {
                    if (component === ɵEmptyOutletComponent) {
                        /** @type {?} */
                        let deepSnapshot = activationEnd.snapshot;
                        // TODO when might there be mutple children, different outlets? explore
                        while (deepSnapshot.firstChild) {
                            deepSnapshot = deepSnapshot.firstChild;
                        }
                        component = deepSnapshot.component;
                    }
                }
                else {
                    component = activationEnd.snapshot.component;
                }
                if (typeof component === 'string') {
                    return of(Object.assign(Object.assign({}, params), { [SCREEN_CLASS_KEY]: component }));
                }
                else if (component) {
                    /** @type {?} */
                    const componentFactory = componentFactoryResolver.resolveComponentFactory(component);
                    return of(Object.assign(Object.assign({}, params), { [SCREEN_CLASS_KEY]: componentFactory.selector }));
                }
                else {
                    // lazy loads cause extra activations, ignore
                    return of(null);
                }
            })), filter((/**
             * @param {?} it
             * @return {?}
             */
            it => it)), map((/**
             * @param {?} params
             * @return {?}
             */
            params => (Object.assign({ [FIREBASE_SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY], [FIREBASE_SCREEN_INSTANCE_ID_KEY]: getScreenInstanceID(params) }, params)))), groupBy((/**
             * @param {?} it
             * @return {?}
             */
            it => it[OUTLET_KEY])), mergeMap((/**
             * @param {?} it
             * @return {?}
             */
            it => it.pipe(distinctUntilChanged((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => JSON.stringify(a) === JSON.stringify(b))), startWith(undefined), pairwise(), map((/**
             * @param {?} __0
             * @return {?}
             */
            ([prior, current]) => prior ? Object.assign({ [FIREBASE_PREVIOUS_SCREEN_CLASS_KEY]: prior[SCREEN_CLASS_KEY], [FIREBASE_PREVIOUS_SCREEN_NAME_KEY]: prior[SCREEN_NAME_KEY], [FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY]: prior[FIREBASE_SCREEN_INSTANCE_ID_KEY] }, current) : current)), switchMap((/**
             * @param {?} params
             * @return {?}
             */
            (params) => __awaiter(this, void 0, void 0, function* () {
                if (userTrackingService) {
                    yield userTrackingService.initialized;
                }
                return yield analytics.logEvent(SCREEN_VIEW_EVENT, params);
            }))))))).subscribe();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.disposable) {
            this.disposable.unsubscribe();
        }
    }
}
ScreenTrackingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ScreenTrackingService.ctorParameters = () => [
    { type: AngularFireAnalytics },
    { type: Router, decorators: [{ type: Optional }] },
    { type: Title, decorators: [{ type: Optional }] },
    { type: ComponentFactoryResolver },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone },
    { type: UserTrackingService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScreenTrackingService.prototype.disposable;
}

/**
 * @fileoverview added by tsickle
 * Generated from: analytics.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularFireAnalyticsModule {
    /**
     * @param {?} analytics
     * @param {?} screenTracking
     * @param {?} userTracking
     */
    constructor(analytics, screenTracking, userTracking) {
        // calling anything on analytics will eagerly load the SDK
        // tslint:disable-next-line:no-unused-expression
        analytics.app.then((/**
         * @return {?}
         */
        () => { }));
    }
}
AngularFireAnalyticsModule.decorators = [
    { type: NgModule, args: [{
                providers: [AngularFireAnalytics]
            },] }
];
/** @nocollapse */
AngularFireAnalyticsModule.ctorParameters = () => [
    { type: AngularFireAnalytics },
    { type: ScreenTrackingService, decorators: [{ type: Optional }] },
    { type: UserTrackingService, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: angular-fire-analytics.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { APP_NAME, APP_VERSION, AngularFireAnalytics, AngularFireAnalyticsModule, COLLECTION_ENABLED, CONFIG, DEBUG_MODE, ScreenTrackingService, UserTrackingService };
//# sourceMappingURL=angular-fire-analytics.js.map
