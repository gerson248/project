/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Base URL for the error details page.
// Keep this value in sync with a similar const in
// `packages/compiler-cli/src/ngtsc/diagnostics/src/error_code.ts`.
const ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';
export class RuntimeError extends Error {
    constructor(code, message) {
        super(formatRuntimeError(code, message));
        this.code = code;
    }
}
// Contains a set of error messages that have details guides at angular.io.
// Full list of available error guides can be found at https://angular.io/errors
/* tslint:disable:no-toplevel-property-access */
export const RUNTIME_ERRORS_WITH_GUIDES = new Set([
    "100" /* EXPRESSION_CHANGED_AFTER_CHECKED */,
    "200" /* CYCLIC_DI_DEPENDENCY */,
    "201" /* PROVIDER_NOT_FOUND */,
    "300" /* MULTIPLE_COMPONENTS_MATCH */,
    "301" /* EXPORT_NOT_FOUND */,
]);
/* tslint:enable:no-toplevel-property-access */
/** Called to format a runtime error */
export function formatRuntimeError(code, message) {
    const fullCode = code ? `NG0${code}: ` : '';
    let errorMessage = `${fullCode}${message}`;
    // Some runtime errors are still thrown without `ngDevMode` (for example
    // `throwProviderNotFoundError`), so we add `ngDevMode` check here to avoid pulling
    // `RUNTIME_ERRORS_WITH_GUIDES` symbol into prod bundles.
    // TODO: revisit all instances where `RuntimeError` is thrown and see if `ngDevMode` can be added
    // there instead to tree-shake more devmode-only code (and eventually remove `ngDevMode` check
    // from this code).
    if (ngDevMode && RUNTIME_ERRORS_WITH_GUIDES.has(code)) {
        errorMessage = `${errorMessage}. Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/NG0${code}`;
    }
    return errorMessage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JfY29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvZXJyb3JfY29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCx1Q0FBdUM7QUFDdkMsa0RBQWtEO0FBQ2xELG1FQUFtRTtBQUNuRSxNQUFNLDJCQUEyQixHQUFHLDJCQUEyQixDQUFDO0FBNEJoRSxNQUFNLE9BQU8sWUFBYSxTQUFRLEtBQUs7SUFDckMsWUFBbUIsSUFBc0IsRUFBRSxPQUFlO1FBQ3hELEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUR4QixTQUFJLEdBQUosSUFBSSxDQUFrQjtJQUV6QyxDQUFDO0NBQ0Y7QUFFRCwyRUFBMkU7QUFDM0UsZ0ZBQWdGO0FBQ2hGLGdEQUFnRDtBQUNoRCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLEdBQUcsQ0FBQzs7Ozs7O0NBTWpELENBQUMsQ0FBQztBQUNILCtDQUErQztBQUUvQyx1Q0FBdUM7QUFDdkMsTUFBTSxVQUFVLGtCQUFrQixDQUFDLElBQXNCLEVBQUUsT0FBZTtJQUN4RSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUU1QyxJQUFJLFlBQVksR0FBRyxHQUFHLFFBQVEsR0FBRyxPQUFPLEVBQUUsQ0FBQztJQUUzQyx3RUFBd0U7SUFDeEUsbUZBQW1GO0lBQ25GLHlEQUF5RDtJQUN6RCxpR0FBaUc7SUFDakcsOEZBQThGO0lBQzlGLG1CQUFtQjtJQUNuQixJQUFJLFNBQVMsSUFBSSwwQkFBMEIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDckQsWUFBWSxHQUFHLEdBQUcsWUFBWSxrQkFBa0IsMkJBQTJCLE9BQU8sSUFBSSxFQUFFLENBQUM7S0FDMUY7SUFDRCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8vIEJhc2UgVVJMIGZvciB0aGUgZXJyb3IgZGV0YWlscyBwYWdlLlxuLy8gS2VlcCB0aGlzIHZhbHVlIGluIHN5bmMgd2l0aCBhIHNpbWlsYXIgY29uc3QgaW5cbi8vIGBwYWNrYWdlcy9jb21waWxlci1jbGkvc3JjL25ndHNjL2RpYWdub3N0aWNzL3NyYy9lcnJvcl9jb2RlLnRzYC5cbmNvbnN0IEVSUk9SX0RFVEFJTFNfUEFHRV9CQVNFX1VSTCA9ICdodHRwczovL2FuZ3VsYXIuaW8vZXJyb3JzJztcblxuZXhwb3J0IGNvbnN0IGVudW0gUnVudGltZUVycm9yQ29kZSB7XG4gIC8vIEludGVybmFsIEVycm9yc1xuXG4gIC8vIENoYW5nZSBEZXRlY3Rpb24gRXJyb3JzXG4gIEVYUFJFU1NJT05fQ0hBTkdFRF9BRlRFUl9DSEVDS0VEID0gJzEwMCcsXG5cbiAgLy8gRGVwZW5kZW5jeSBJbmplY3Rpb24gRXJyb3JzXG4gIENZQ0xJQ19ESV9ERVBFTkRFTkNZID0gJzIwMCcsXG4gIFBST1ZJREVSX05PVF9GT1VORCA9ICcyMDEnLFxuXG4gIC8vIFRlbXBsYXRlIEVycm9yc1xuICBNVUxUSVBMRV9DT01QT05FTlRTX01BVENIID0gJzMwMCcsXG4gIEVYUE9SVF9OT1RfRk9VTkQgPSAnMzAxJyxcbiAgUElQRV9OT1RfRk9VTkQgPSAnMzAyJyxcbiAgVU5LTk9XTl9CSU5ESU5HID0gJzMwMycsXG4gIFVOS05PV05fRUxFTUVOVCA9ICczMDQnLFxuXG4gIC8vIFN0eWxpbmcgRXJyb3JzXG5cbiAgLy8gRGVjbGFyYXRpb25zIEVycm9yc1xuXG4gIC8vIGkxOG4gRXJyb3JzXG5cbiAgLy8gQ29tcGlsYXRpb24gRXJyb3JzXG59XG5cbmV4cG9ydCBjbGFzcyBSdW50aW1lRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb2RlOiBSdW50aW1lRXJyb3JDb2RlLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihmb3JtYXRSdW50aW1lRXJyb3IoY29kZSwgbWVzc2FnZSkpO1xuICB9XG59XG5cbi8vIENvbnRhaW5zIGEgc2V0IG9mIGVycm9yIG1lc3NhZ2VzIHRoYXQgaGF2ZSBkZXRhaWxzIGd1aWRlcyBhdCBhbmd1bGFyLmlvLlxuLy8gRnVsbCBsaXN0IG9mIGF2YWlsYWJsZSBlcnJvciBndWlkZXMgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vYW5ndWxhci5pby9lcnJvcnNcbi8qIHRzbGludDpkaXNhYmxlOm5vLXRvcGxldmVsLXByb3BlcnR5LWFjY2VzcyAqL1xuZXhwb3J0IGNvbnN0IFJVTlRJTUVfRVJST1JTX1dJVEhfR1VJREVTID0gbmV3IFNldChbXG4gIFJ1bnRpbWVFcnJvckNvZGUuRVhQUkVTU0lPTl9DSEFOR0VEX0FGVEVSX0NIRUNLRUQsXG4gIFJ1bnRpbWVFcnJvckNvZGUuQ1lDTElDX0RJX0RFUEVOREVOQ1ksXG4gIFJ1bnRpbWVFcnJvckNvZGUuUFJPVklERVJfTk9UX0ZPVU5ELFxuICBSdW50aW1lRXJyb3JDb2RlLk1VTFRJUExFX0NPTVBPTkVOVFNfTUFUQ0gsXG4gIFJ1bnRpbWVFcnJvckNvZGUuRVhQT1JUX05PVF9GT1VORCxcbl0pO1xuLyogdHNsaW50OmVuYWJsZTpuby10b3BsZXZlbC1wcm9wZXJ0eS1hY2Nlc3MgKi9cblxuLyoqIENhbGxlZCB0byBmb3JtYXQgYSBydW50aW1lIGVycm9yICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0UnVudGltZUVycm9yKGNvZGU6IFJ1bnRpbWVFcnJvckNvZGUsIG1lc3NhZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGZ1bGxDb2RlID0gY29kZSA/IGBORzAke2NvZGV9OiBgIDogJyc7XG5cbiAgbGV0IGVycm9yTWVzc2FnZSA9IGAke2Z1bGxDb2RlfSR7bWVzc2FnZX1gO1xuXG4gIC8vIFNvbWUgcnVudGltZSBlcnJvcnMgYXJlIHN0aWxsIHRocm93biB3aXRob3V0IGBuZ0Rldk1vZGVgIChmb3IgZXhhbXBsZVxuICAvLyBgdGhyb3dQcm92aWRlck5vdEZvdW5kRXJyb3JgKSwgc28gd2UgYWRkIGBuZ0Rldk1vZGVgIGNoZWNrIGhlcmUgdG8gYXZvaWQgcHVsbGluZ1xuICAvLyBgUlVOVElNRV9FUlJPUlNfV0lUSF9HVUlERVNgIHN5bWJvbCBpbnRvIHByb2QgYnVuZGxlcy5cbiAgLy8gVE9ETzogcmV2aXNpdCBhbGwgaW5zdGFuY2VzIHdoZXJlIGBSdW50aW1lRXJyb3JgIGlzIHRocm93biBhbmQgc2VlIGlmIGBuZ0Rldk1vZGVgIGNhbiBiZSBhZGRlZFxuICAvLyB0aGVyZSBpbnN0ZWFkIHRvIHRyZWUtc2hha2UgbW9yZSBkZXZtb2RlLW9ubHkgY29kZSAoYW5kIGV2ZW50dWFsbHkgcmVtb3ZlIGBuZ0Rldk1vZGVgIGNoZWNrXG4gIC8vIGZyb20gdGhpcyBjb2RlKS5cbiAgaWYgKG5nRGV2TW9kZSAmJiBSVU5USU1FX0VSUk9SU19XSVRIX0dVSURFUy5oYXMoY29kZSkpIHtcbiAgICBlcnJvck1lc3NhZ2UgPSBgJHtlcnJvck1lc3NhZ2V9LiBGaW5kIG1vcmUgYXQgJHtFUlJPUl9ERVRBSUxTX1BBR0VfQkFTRV9VUkx9L05HMCR7Y29kZX1gO1xuICB9XG4gIHJldHVybiBlcnJvck1lc3NhZ2U7XG59XG4iXX0=